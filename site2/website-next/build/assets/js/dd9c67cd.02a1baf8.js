"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[85743],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,g=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(g,l(l({ref:t},c),{},{components:n})):a.createElement(g,l({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},58215:function(e,t,n){var a=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},55064:function(e,t,n){n.d(t,{Z:function(){return p}});var a=n(67294),r=n(79443);var i=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=n(86010),o="tabItem_1uMI",s="tabItemActive_2DSg";var p=function(e){var t,n=e.lazy,r=e.block,p=e.defaultValue,c=e.values,d=e.groupId,m=e.className,u=a.Children.toArray(e.children),g=null!=c?c:u.map((function(e){return{value:e.props.value,label:e.props.label}})),f=null!=p?p:null==(t=u.find((function(e){return e.props.default})))?void 0:t.props.value,k=i(),h=k.tabGroupChoices,N=k.setTabGroupChoices,b=(0,a.useState)(f),y=b[0],C=b[1],v=[];if(null!=d){var w=h[d];null!=w&&w!==y&&g.some((function(e){return e.value===w}))&&C(w)}var P=function(e){var t=e.currentTarget,n=v.indexOf(t),a=g[n].value;C(a),null!=d&&(N(d,a),setTimeout((function(){var e,n,a,r,i,l,o,p;(e=t.getBoundingClientRect(),n=e.top,a=e.left,r=e.bottom,i=e.right,l=window,o=l.innerHeight,p=l.innerWidth,n>=0&&i<=p&&r<=o&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(s),setTimeout((function(){return t.classList.remove(s)}),2e3))}),150))},T=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=v.indexOf(e.target)+1;n=v[a]||v[0];break;case"ArrowLeft":var r=v.indexOf(e.target)-1;n=v[r]||v[v.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":r},m)},g.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,className:(0,l.Z)("tabs__item",o,{"tabs__item--active":y===t}),key:t,ref:function(e){return v.push(e)},onKeyDown:T,onFocus:P,onClick:P},null!=n?n:t)}))),n?(0,a.cloneElement)(u.filter((function(e){return e.props.value===y}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},u.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==y})}))))}},79443:function(e,t,n){var a=(0,n(67294).createContext)(void 0);t.Z=a},39495:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),l=(n(55064),n(58215),["components"]),o={id:"client-libraries-go",title:"Pulsar Go client",sidebar_label:"Go",original_id:"client-libraries-go"},s=void 0,p={unversionedId:"client-libraries-go",id:"version-2.7.0/client-libraries-go",isDocsHomePage:!1,title:"Pulsar Go client",description:"Tips: Currently, the CGo client will be deprecated, if you want to know more about the CGo client, please refer to CGo client docs",source:"@site/versioned_docs/version-2.7.0/client-libraries-go.md",sourceDirName:".",slug:"/client-libraries-go",permalink:"/docs/2.7.0/client-libraries-go",editUrl:"https://github.com/apache/pulsar/edit/master/site2/website-next/versioned_docs/version-2.7.0/client-libraries-go.md",tags:[],version:"2.7.0",frontMatter:{id:"client-libraries-go",title:"Pulsar Go client",sidebar_label:"Go",original_id:"client-libraries-go"},sidebar:"version-2.7.0/docsSidebar",previous:{title:"Java",permalink:"/docs/2.7.0/client-libraries-java"},next:{title:"Python",permalink:"/docs/2.7.0/client-libraries-python"}},c=[{value:"Installation",id:"installation",children:[{value:"Install go package",id:"install-go-package",children:[]}]},{value:"Connection URLs",id:"connection-urls",children:[]},{value:"Create a client",id:"create-a-client",children:[]},{value:"Producers",id:"producers",children:[{value:"Producer operations",id:"producer-operations",children:[]},{value:"Producer Example",id:"producer-example",children:[]},{value:"Producer configuration",id:"producer-configuration",children:[]}]},{value:"Consumers",id:"consumers",children:[{value:"Consumer operations",id:"consumer-operations",children:[]},{value:"Receive example",id:"receive-example",children:[]},{value:"Consumer configuration",id:"consumer-configuration",children:[]}]},{value:"Readers",id:"readers",children:[{value:"Reader operations",id:"reader-operations",children:[]},{value:"Reader example",id:"reader-example",children:[]},{value:"Reader configuration",id:"reader-configuration",children:[]}]},{value:"Messages",id:"messages",children:[]},{value:"TLS encryption and authentication",id:"tls-encryption-and-authentication",children:[]},{value:"OAuth2 authentication",id:"oauth2-authentication",children:[]}],d={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Tips: Currently, the CGo client will be deprecated, if you want to know more about the CGo client, please refer to ",(0,i.kt)("a",{parentName:"p",href:"client-libraries-cgo"},"CGo client docs"))),(0,i.kt)("p",null,"You can use Pulsar ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/apache/pulsar-client-go"},"Go client")," to create Pulsar ",(0,i.kt)("a",{parentName:"p",href:"#producers"},"producers"),", ",(0,i.kt)("a",{parentName:"p",href:"#consumers"},"consumers"),", and ",(0,i.kt)("a",{parentName:"p",href:"#readers"},"readers")," in Go (aka Golang)."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"API docs available as well"),(0,i.kt)("br",{parentName:"p"}),"\n","For standard API docs, consult the ",(0,i.kt)("a",{parentName:"p",href:"https://godoc.org/github.com/apache/pulsar-client-go/pulsar"},"Godoc"),".")),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("h3",{id:"install-go-package"},"Install go package"),(0,i.kt)("p",null,"You can install the ",(0,i.kt)("inlineCode",{parentName:"p"},"pulsar")," library locally using ",(0,i.kt)("inlineCode",{parentName:"p"},"go get"),".  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'\n$ go get -u "github.com/apache/pulsar-client-go/pulsar"\n\n')),(0,i.kt)("p",null,"Once installed locally, you can import it into your project:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\nimport "github.com/apache/pulsar-client-go/pulsar"\n\n')),(0,i.kt)("h2",{id:"connection-urls"},"Connection URLs"),(0,i.kt)("p",null,"To connect to Pulsar using client libraries, you need to specify a ",(0,i.kt)("a",{parentName:"p",href:"developing-binary-protocol"},"Pulsar protocol")," URL."),(0,i.kt)("p",null,"Pulsar protocol URLs are assigned to specific clusters, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"pulsar")," scheme and have a default port of 6650. Here's an example for ",(0,i.kt)("inlineCode",{parentName:"p"},"localhost"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-http"},"\npulsar://localhost:6650\n\n")),(0,i.kt)("p",null,"A URL for a production Pulsar cluster may look something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-http"},"\npulsar://pulsar.us-west.example.com:6650\n\n")),(0,i.kt)("p",null,"If you're using ",(0,i.kt)("a",{parentName:"p",href:"security-tls-authentication"},"TLS")," authentication, the URL will look like something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-http"},"\npulsar+ssl://pulsar.us-west.example.com:6651\n\n")),(0,i.kt)("h2",{id:"create-a-client"},"Create a client"),(0,i.kt)("p",null,"In order to interact with Pulsar, you'll first need a ",(0,i.kt)("inlineCode",{parentName:"p"},"Client")," object. You can create a client object using the ",(0,i.kt)("inlineCode",{parentName:"p"},"NewClient")," function, passing in a ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientOptions")," object (more on configuration ",(0,i.kt)("a",{parentName:"p",href:"#client-configuration"},"below"),"). Here's an example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\nimport (\n    "log"\n    "time"\n\n    "github.com/apache/pulsar-client-go/pulsar"\n)\n\nfunc main() {\n    client, err := pulsar.NewClient(pulsar.ClientOptions{\n        URL:               "pulsar://localhost:6650",\n        OperationTimeout:  30 * time.Second,\n        ConnectionTimeout: 30 * time.Second,\n    })\n    if err != nil {\n        log.Fatalf("Could not instantiate Pulsar client: %v", err)\n    }\n\n    defer client.Close()\n}\n\n')),(0,i.kt)("p",null,"The following configurable parameters are available for Pulsar clients:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"URL"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Configure the service URL for the Pulsar service. This parameter is required"),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"ConnectionTimeout"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Timeout for the establishment of a TCP connection"),(0,i.kt)("td",{parentName:"tr",align:"left"},"30s")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"OperationTimeout"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Set the operation timeout. Producer-create, subscribe and unsubscribe operations will be retried until this interval, after which the operation will be marked as failed"),(0,i.kt)("td",{parentName:"tr",align:"left"},"30s")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Authentication"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Configure the authentication provider. Example: ",(0,i.kt)("inlineCode",{parentName:"td"},'Authentication: NewAuthenticationTLS("my-cert.pem", "my-key.pem")')),(0,i.kt)("td",{parentName:"tr",align:"left"},"no authentication")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"TLSTrustCertsFilePath"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Set the path to the trusted TLS certificate file"),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"TLSAllowInsecureConnection"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Configure whether the Pulsar client accept untrusted TLS certificate from broker"),(0,i.kt)("td",{parentName:"tr",align:"left"},"false")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"TLSValidateHostname"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Configure whether the Pulsar client verify the validity of the host name from broker"),(0,i.kt)("td",{parentName:"tr",align:"left"},"false")))),(0,i.kt)("h2",{id:"producers"},"Producers"),(0,i.kt)("p",null,"Pulsar producers publish messages to Pulsar topics. You can ",(0,i.kt)("a",{parentName:"p",href:"#producer-configuration"},"configure")," Go producers using a ",(0,i.kt)("inlineCode",{parentName:"p"},"ProducerOptions")," object. Here's an example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\nproducer, err := client.CreateProducer(pulsar.ProducerOptions{\n    Topic: "my-topic",\n})\n\n_, err = producer.Send(context.Background(), &pulsar.ProducerMessage{\n    Payload: []byte("hello"),\n})\n\ndefer producer.Close()\n\nif err != nil {\n    fmt.Println("Failed to publish message", err)\n}\nfmt.Println("Published message")\n\n')),(0,i.kt)("h3",{id:"producer-operations"},"Producer operations"),(0,i.kt)("p",null,"Pulsar Go producers have the following methods available:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Method"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Return type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Topic()")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Fetches the producer's ",(0,i.kt)("a",{parentName:"td",href:"/docs/2.7.0/reference-terminology#topic"},"topic")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Name()")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Fetches the producer's name"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Send(context.Context, *ProducerMessage)")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Publishes a ",(0,i.kt)("a",{parentName:"td",href:"#messages"},"message")," to the producer's topic. This call will block until the message is successfully acknowledged by the Pulsar broker, or an error will be thrown if the timeout set using the ",(0,i.kt)("inlineCode",{parentName:"td"},"SendTimeout")," in the producer's ",(0,i.kt)("a",{parentName:"td",href:"#producer-configuration"},"configuration")," is exceeded."),(0,i.kt)("td",{parentName:"tr",align:"left"},"(MessageID, error)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"SendAsync(context.Context, *ProducerMessage, func(MessageID, *ProducerMessage, error))")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Send a message, this call will be blocking until is successfully acknowledged by the Pulsar broker."),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"LastSequenceID()")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Get the last sequence id that was published by this producer. his represent either the automatically assigned or custom sequence id (set on the ProducerMessage) that was published and acknowledged by the broker."),(0,i.kt)("td",{parentName:"tr",align:"left"},"int64")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Flush()")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Flush all the messages buffered in the client and wait until all messages have been successfully persisted."),(0,i.kt)("td",{parentName:"tr",align:"left"},"error")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Close()")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Closes the producer and releases all resources allocated to it. If ",(0,i.kt)("inlineCode",{parentName:"td"},"Close()")," is called then no more messages will be accepted from the publisher. This method will block until all pending publish requests have been persisted by Pulsar. If an error is thrown, no pending writes will be retried."),(0,i.kt)("td",{parentName:"tr",align:"left"})))),(0,i.kt)("h3",{id:"producer-example"},"Producer Example"),(0,i.kt)("h4",{id:"how-to-use-message-router-in-producer"},"How to use message router in producer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\nclient, err := NewClient(ClientOptions{\n    URL: serviceURL,\n})\n\nif err != nil {\n    log.Fatal(err)\n}\ndefer client.Close()\n\n// Only subscribe on the specific partition\nconsumer, err := client.Subscribe(ConsumerOptions{\n    Topic:            "my-partitioned-topic-partition-2",\n    SubscriptionName: "my-sub",\n})\n\nif err != nil {\n    log.Fatal(err)\n}\ndefer consumer.Close()\n\nproducer, err := client.CreateProducer(ProducerOptions{\n    Topic: "my-partitioned-topic",\n    MessageRouter: func(msg *ProducerMessage, tm TopicMetadata) int {\n        fmt.Println("Routing message ", msg, " -- Partitions: ", tm.NumPartitions())\n        return 2\n    },\n})\n\nif err != nil {\n    log.Fatal(err)\n}\ndefer producer.Close()\n\n')),(0,i.kt)("h4",{id:"how-to-use-delay-relative-in-producer"},"How to use delay relative in producer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\nclient, err := NewClient(ClientOptions{\n    URL: "pulsar://localhost:6650",\n})\nif err != nil {\n    log.Fatal(err)\n}\ndefer client.Close()\n\ntopicName := newTopicName()\nproducer, err := client.CreateProducer(ProducerOptions{\n    Topic: topicName,\n})\nif err != nil {\n    log.Fatal(err)\n}\ndefer producer.Close()\n\nconsumer, err := client.Subscribe(ConsumerOptions{\n    Topic:            topicName,\n    SubscriptionName: "subName",\n    Type:             Shared,\n})\nif err != nil {\n    log.Fatal(err)\n}\ndefer consumer.Close()\n\nID, err := producer.Send(context.Background(), &ProducerMessage{\n    Payload:      []byte(fmt.Sprintf("test")),\n    DeliverAfter: 3 * time.Second,\n})\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Println(ID)\n\nctx, canc := context.WithTimeout(context.Background(), 1*time.Second)\nmsg, err := consumer.Receive(ctx)\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Println(msg.Payload())\ncanc()\n\nctx, canc = context.WithTimeout(context.Background(), 5*time.Second)\nmsg, err = consumer.Receive(ctx)\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Println(msg.Payload())\ncanc()\n\n')),(0,i.kt)("h3",{id:"producer-configuration"},"Producer configuration"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Topic"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Topic specify the topic this consumer will subscribe to. This argument is required when constructing the reader."),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Name specify a name for the producer. If not assigned, the system will generate a globally unique name which can be access with Producer.ProducerName()."),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Properties"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Properties attach a set of application defined properties to the producer This properties will be visible in the topic stats"),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"MaxPendingMessages"),(0,i.kt)("td",{parentName:"tr",align:"left"},"MaxPendingMessages set the max size of the queue holding the messages pending to receive an acknowledgment from the broker."),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"HashingScheme"),(0,i.kt)("td",{parentName:"tr",align:"left"},"HashingScheme change the ",(0,i.kt)("inlineCode",{parentName:"td"},"HashingScheme")," used to chose the partition on where to publish a particular message."),(0,i.kt)("td",{parentName:"tr",align:"left"},"JavaStringHash")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"CompressionType"),(0,i.kt)("td",{parentName:"tr",align:"left"},"CompressionType set the compression type for the producer."),(0,i.kt)("td",{parentName:"tr",align:"left"},"not compressed")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"MessageRouter"),(0,i.kt)("td",{parentName:"tr",align:"left"},"MessageRouter set a custom message routing policy by passing an implementation of MessageRouter"),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"DisableBatching"),(0,i.kt)("td",{parentName:"tr",align:"left"},"DisableBatching control whether automatic batching of messages is enabled for the producer."),(0,i.kt)("td",{parentName:"tr",align:"left"},"false")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"BatchingMaxPublishDelay"),(0,i.kt)("td",{parentName:"tr",align:"left"},"BatchingMaxPublishDelay set the time period within which the messages sent will be batched"),(0,i.kt)("td",{parentName:"tr",align:"left"},"1ms")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"BatchingMaxMessages"),(0,i.kt)("td",{parentName:"tr",align:"left"},"BatchingMaxMessages set the maximum number of messages permitted in a batch."),(0,i.kt)("td",{parentName:"tr",align:"left"},"1000")))),(0,i.kt)("h2",{id:"consumers"},"Consumers"),(0,i.kt)("p",null,"Pulsar consumers subscribe to one or more Pulsar topics and listen for incoming messages produced on that topic/those topics. You can ",(0,i.kt)("a",{parentName:"p",href:"#consumer-configuration"},"configure")," Go consumers using a ",(0,i.kt)("inlineCode",{parentName:"p"},"ConsumerOptions")," object. Here's a basic example that uses channels:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\nconsumer, err := client.Subscribe(pulsar.ConsumerOptions{\n    Topic:            "topic-1",\n    SubscriptionName: "my-sub",\n    Type:             pulsar.Shared,\n})\nif err != nil {\n    log.Fatal(err)\n}\ndefer consumer.Close()\n\nfor i := 0; i < 10; i++ {\n    msg, err := consumer.Receive(context.Background())\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf("Received message msgId: %#v -- content: \'%s\'\\n",\n        msg.ID(), string(msg.Payload()))\n\n    consumer.Ack(msg)\n}\n\nif err := consumer.Unsubscribe(); err != nil {\n    log.Fatal(err)\n}\n\n')),(0,i.kt)("h3",{id:"consumer-operations"},"Consumer operations"),(0,i.kt)("p",null,"Pulsar Go consumers have the following methods available:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Method"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Return type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Subscription()")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Returns the consumer's subscription name"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Unsubcribe()")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Unsubscribes the consumer from the assigned topic. Throws an error if the unsubscribe operation is somehow unsuccessful."),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"error"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Receive(context.Context)")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Receives a single message from the topic. This method blocks until a message is available."),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"(Message, error)"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Ack(Message)")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/docs/2.7.0/reference-terminology#acknowledgment-ack"},"Acknowledges")," a message to the Pulsar ",(0,i.kt)("a",{parentName:"td",href:"/docs/2.7.0/reference-terminology#broker"},"broker")),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"AckID(MessageID)")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/docs/2.7.0/reference-terminology#acknowledgment-ack"},"Acknowledges")," a message to the Pulsar ",(0,i.kt)("a",{parentName:"td",href:"/docs/2.7.0/reference-terminology#broker"},"broker")," by message ID"),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Nack(Message)")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Acknowledge the failure to process a single message."),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"NackID(MessageID)")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Acknowledge the failure to process a single message."),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Seek(msgID MessageID)")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Reset the subscription associated with this consumer to a specific message id. The message id can either be a specific message or represent the first or last messages in the topic."),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"error"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"SeekByTime(time time.Time)")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Reset the subscription associated with this consumer to a specific message publish time."),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"error"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Close()")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Closes the consumer, disabling its ability to receive messages from the broker"),(0,i.kt)("td",{parentName:"tr",align:"left"})))),(0,i.kt)("h3",{id:"receive-example"},"Receive example"),(0,i.kt)("h4",{id:"how-to-use-regx-consumer"},"How to use regx consumer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\nclient, err := pulsar.NewClient(pulsar.ClientOptions{\n    URL: "pulsar://localhost:6650",\n})\n\ndefer client.Close()\n\np, err := client.CreateProducer(ProducerOptions{\n    Topic:           topicInRegex,\n    DisableBatching: true,\n})\nif err != nil {\n    log.Fatal(err)\n}\ndefer p.Close()\n\ntopicsPattern := fmt.Sprintf("persistent://%s/foo.*", namespace)\nopts := ConsumerOptions{\n    TopicsPattern:    topicsPattern,\n    SubscriptionName: "regex-sub",\n}\nconsumer, err := client.Subscribe(opts)\nif err != nil {\n    log.Fatal(err)\n}\ndefer consumer.Close()\n\n')),(0,i.kt)("h4",{id:"how-to-use-multi-topics-consumer"},"How to use multi topics Consumer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\nfunc newTopicName() string {\n    return fmt.Sprintf("my-topic-%v", time.Now().Nanosecond())\n}\n\n\ntopic1 := "topic-1"\ntopic2 := "topic-2"\n\nclient, err := NewClient(ClientOptions{\n    URL: "pulsar://localhost:6650",\n})\nif err != nil {\n    log.Fatal(err)\n}\ntopics := []string{topic1, topic2}\nconsumer, err := client.Subscribe(ConsumerOptions{\n    Topics:           topics,\n    SubscriptionName: "multi-topic-sub",\n})\nif err != nil {\n    log.Fatal(err)\n}\ndefer consumer.Close()\n\n')),(0,i.kt)("h4",{id:"how-to-use-consumer-listener"},"How to use consumer listener"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\nimport (\n    "fmt"\n    "log"\n\n    "github.com/apache/pulsar-client-go/pulsar"\n)\n\nfunc main() {\n    client, err := pulsar.NewClient(pulsar.ClientOptions{URL: "pulsar://localhost:6650"})\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    defer client.Close()\n\n    channel := make(chan pulsar.ConsumerMessage, 100)\n\n    options := pulsar.ConsumerOptions{\n        Topic:            "topic-1",\n        SubscriptionName: "my-subscription",\n        Type:             pulsar.Shared,\n    }\n\n    options.MessageChannel = channel\n\n    consumer, err := client.Subscribe(options)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    defer consumer.Close()\n\n    // Receive messages from channel. The channel returns a struct which contains message and the consumer from where\n    // the message was received. It\'s not necessary here since we have 1 single consumer, but the channel could be\n    // shared across multiple consumers as well\n    for cm := range channel {\n        msg := cm.Message\n        fmt.Printf("Received message  msgId: %v -- content: \'%s\'\\n",\n            msg.ID(), string(msg.Payload()))\n\n        consumer.Ack(msg)\n    }\n}\n\n')),(0,i.kt)("h4",{id:"how-to-use-consumer-receive-timeout"},"How to use consumer receive timeout"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\nclient, err := NewClient(ClientOptions{\n    URL: "pulsar://localhost:6650",\n})\nif err != nil {\n    log.Fatal(err)\n}\ndefer client.Close()\n\ntopic := "test-topic-with-no-messages"\nctx, cancel := context.WithTimeout(context.Background(), 500*time.Millisecond)\ndefer cancel()\n\n// create consumer\nconsumer, err := client.Subscribe(ConsumerOptions{\n    Topic:            topic,\n    SubscriptionName: "my-sub1",\n    Type:             Shared,\n})\nif err != nil {\n    log.Fatal(err)\n}\ndefer consumer.Close()\n\nmsg, err := consumer.Receive(ctx)\nfmt.Println(msg.Payload())\nif err != nil {\n    log.Fatal(err)\n}\n\n')),(0,i.kt)("h3",{id:"consumer-configuration"},"Consumer configuration"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Topic"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Topic specify the topic this consumer will subscribe to. This argument is required when constructing the reader."),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Topics"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Specify a list of topics this consumer will subscribe on. Either a topic, a list of topics or a topics pattern are required when subscribing"),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"TopicsPattern"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Specify a regular expression to subscribe to multiple topics under the same namespace. Either a topic, a list of topics or a topics pattern are required when subscribing"),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"AutoDiscoveryPeriod"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Specify the interval in which to poll for new partitions or new topics if using a TopicsPattern."),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"SubscriptionName"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Specify the subscription name for this consumer. This argument is required when subscribing"),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Set the consumer name"),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Properties"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Properties attach a set of application defined properties to the producer This properties will be visible in the topic stats"),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Select the subscription type to be used when subscribing to the topic."),(0,i.kt)("td",{parentName:"tr",align:"left"},"Exclusive")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"SubscriptionInitialPosition"),(0,i.kt)("td",{parentName:"tr",align:"left"},"InitialPosition at which the cursor will be set when subscribe"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Latest")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"DLQ"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Configuration for Dead Letter Queue consumer policy."),(0,i.kt)("td",{parentName:"tr",align:"left"},"no DLQ")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"MessageChannel"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Sets a ",(0,i.kt)("inlineCode",{parentName:"td"},"MessageChannel")," for the consumer. When a message is received, it will be pushed to the channel for consumption"),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"ReceiverQueueSize"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Sets the size of the consumer receive queue."),(0,i.kt)("td",{parentName:"tr",align:"left"},"1000")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"NackRedeliveryDelay"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The delay after which to redeliver the messages that failed to be processed"),(0,i.kt)("td",{parentName:"tr",align:"left"},"1min")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"ReadCompacted"),(0,i.kt)("td",{parentName:"tr",align:"left"},"If enabled, the consumer will read messages from the compacted topic rather than reading the full message backlog of the topic"),(0,i.kt)("td",{parentName:"tr",align:"left"},"false")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"ReplicateSubscriptionState"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Mark the subscription as replicated to keep it in sync across clusters"),(0,i.kt)("td",{parentName:"tr",align:"left"},"false")))),(0,i.kt)("h2",{id:"readers"},"Readers"),(0,i.kt)("p",null,"Pulsar readers process messages from Pulsar topics. Readers are different from consumers because with readers you need to explicitly specify which message in the stream you want to begin with (consumers, on the other hand, automatically begin with the most recent unacked message). You can ",(0,i.kt)("a",{parentName:"p",href:"#reader-configuration"},"configure")," Go readers using a ",(0,i.kt)("inlineCode",{parentName:"p"},"ReaderOptions")," object. Here's an example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\nreader, err := client.CreateReader(pulsar.ReaderOptions{\n    Topic:          "topic-1",\n    StartMessageID: pulsar.EarliestMessageID(),\n})\nif err != nil {\n    log.Fatal(err)\n}\ndefer reader.Close()\n\n')),(0,i.kt)("h3",{id:"reader-operations"},"Reader operations"),(0,i.kt)("p",null,"Pulsar Go readers have the following methods available:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Method"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Return type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Topic()")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Returns the reader's ",(0,i.kt)("a",{parentName:"td",href:"/docs/2.7.0/reference-terminology#topic"},"topic")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Next(context.Context)")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Receives the next message on the topic (analogous to the ",(0,i.kt)("inlineCode",{parentName:"td"},"Receive")," method for ",(0,i.kt)("a",{parentName:"td",href:"#consumer-operations"},"consumers"),"). This method blocks until a message is available."),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"(Message, error)"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"HasNext()")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Check if there is any message available to read from the current position"),(0,i.kt)("td",{parentName:"tr",align:"left"},"(bool, error)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Close()")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Closes the reader, disabling its ability to receive messages from the broker"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"error"))))),(0,i.kt)("h3",{id:"reader-example"},"Reader example"),(0,i.kt)("h4",{id:"how-to-use-reader-to-read-next-message"},"How to use reader to read 'next' message"),(0,i.kt)("p",null,"Here's an example usage of a Go reader that uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"Next()")," method to process incoming messages:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\nimport (\n    "context"\n    "fmt"\n    "log"\n\n    "github.com/apache/pulsar-client-go/pulsar"\n)\n\nfunc main() {\n    client, err := pulsar.NewClient(pulsar.ClientOptions{URL: "pulsar://localhost:6650"})\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    defer client.Close()\n\n    reader, err := client.CreateReader(pulsar.ReaderOptions{\n        Topic:          "topic-1",\n        StartMessageID: pulsar.EarliestMessageID(),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer reader.Close()\n\n    for reader.HasNext() {\n        msg, err := reader.Next(context.Background())\n        if err != nil {\n            log.Fatal(err)\n        }\n\n        fmt.Printf("Received message msgId: %#v -- content: \'%s\'\\n",\n            msg.ID(), string(msg.Payload()))\n    }\n}\n\n')),(0,i.kt)("p",null,"In the example above, the reader begins reading from the earliest available message (specified by ",(0,i.kt)("inlineCode",{parentName:"p"},"pulsar.EarliestMessage"),"). The reader can also begin reading from the latest message (",(0,i.kt)("inlineCode",{parentName:"p"},"pulsar.LatestMessage"),") or some other message ID specified by bytes using the ",(0,i.kt)("inlineCode",{parentName:"p"},"DeserializeMessageID")," function, which takes a byte array and returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"MessageID")," object. Here's an example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\nlastSavedId := // Read last saved message id from external store as byte[]\n\nreader, err := client.CreateReader(pulsar.ReaderOptions{\n    Topic:          "my-golang-topic",\n    StartMessageID: pulsar.DeserializeMessageID(lastSavedId),\n})\n\n')),(0,i.kt)("h4",{id:"how-to-use-reader-to-read-specific-message"},"How to use reader to read specific message"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\nclient, err := NewClient(ClientOptions{\n    URL: lookupURL,\n})\n\nif err != nil {\n    log.Fatal(err)\n}\ndefer client.Close()\n\ntopic := "topic-1"\nctx := context.Background()\n\n// create producer\nproducer, err := client.CreateProducer(ProducerOptions{\n    Topic:           topic,\n    DisableBatching: true,\n})\nif err != nil {\n    log.Fatal(err)\n}\ndefer producer.Close()\n\n// send 10 messages\nmsgIDs := [10]MessageID{}\nfor i := 0; i < 10; i++ {\n    msgID, err := producer.Send(ctx, &ProducerMessage{\n        Payload: []byte(fmt.Sprintf("hello-%d", i)),\n    })\n    assert.NoError(t, err)\n    assert.NotNil(t, msgID)\n    msgIDs[i] = msgID\n}\n\n// create reader on 5th message (not included)\nreader, err := client.CreateReader(ReaderOptions{\n    Topic:          topic,\n    StartMessageID: msgIDs[4],\n})\n\nif err != nil {\n    log.Fatal(err)\n}\ndefer reader.Close()\n\n// receive the remaining 5 messages\nfor i := 5; i < 10; i++ {\n    msg, err := reader.Next(context.Background())\n    if err != nil {\n    log.Fatal(err)\n}\n\n// create reader on 5th message (included)\nreaderInclusive, err := client.CreateReader(ReaderOptions{\n    Topic:                   topic,\n    StartMessageID:          msgIDs[4],\n    StartMessageIDInclusive: true,\n})\n\nif err != nil {\n    log.Fatal(err)\n}\ndefer readerInclusive.Close()\n\n')),(0,i.kt)("h3",{id:"reader-configuration"},"Reader configuration"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Topic"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Topic specify the topic this consumer will subscribe to. This argument is required when constructing the reader."),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Name set the reader name."),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Properties"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Attach a set of application defined properties to the reader. This properties will be visible in the topic stats"),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"StartMessageID"),(0,i.kt)("td",{parentName:"tr",align:"left"},"StartMessageID initial reader positioning is done by specifying a message id."),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"StartMessageIDInclusive"),(0,i.kt)("td",{parentName:"tr",align:"left"},"If true, the reader will start at the ",(0,i.kt)("inlineCode",{parentName:"td"},"StartMessageID"),", included. Default is ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),' and the reader will start from the "next" message'),(0,i.kt)("td",{parentName:"tr",align:"left"},"false")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"MessageChannel"),(0,i.kt)("td",{parentName:"tr",align:"left"},"MessageChannel sets a ",(0,i.kt)("inlineCode",{parentName:"td"},"MessageChannel")," for the consumer When a message is received, it will be pushed to the channel for consumption"),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"ReceiverQueueSize"),(0,i.kt)("td",{parentName:"tr",align:"left"},"ReceiverQueueSize sets the size of the consumer receive queue."),(0,i.kt)("td",{parentName:"tr",align:"left"},"1000")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"SubscriptionRolePrefix"),(0,i.kt)("td",{parentName:"tr",align:"left"},"SubscriptionRolePrefix set the subscription role prefix."),(0,i.kt)("td",{parentName:"tr",align:"left"},"\u201creader\u201d")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"ReadCompacted"),(0,i.kt)("td",{parentName:"tr",align:"left"},"If enabled, the reader will read messages from the compacted topic rather than reading the full message backlog of the topic.  ReadCompacted can only be enabled when reading from a persistent topic."),(0,i.kt)("td",{parentName:"tr",align:"left"},"false")))),(0,i.kt)("h2",{id:"messages"},"Messages"),(0,i.kt)("p",null,"The Pulsar Go client provides a ",(0,i.kt)("inlineCode",{parentName:"p"},"ProducerMessage")," interface that you can use to construct messages to producer on Pulsar topics. Here's an example message:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\nmsg := pulsar.ProducerMessage{\n    Payload: []byte("Here is some message data"),\n    Key: "message-key",\n    Properties: map[string]string{\n        "foo": "bar",\n    },\n    EventTime: time.Now(),\n    ReplicationClusters: []string{"cluster1", "cluster3"},\n}\n\nif _, err := producer.send(msg); err != nil {\n    log.Fatalf("Could not publish message due to: %v", err)\n}\n\n')),(0,i.kt)("p",null,"The following methods parameters are available for ",(0,i.kt)("inlineCode",{parentName:"p"},"ProducerMessage")," objects:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Payload")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The actual data payload of the message")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Key")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The optional key associated with the message (particularly useful for things like topic compaction)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Properties")),(0,i.kt)("td",{parentName:"tr",align:"left"},"A key-value map (both keys and values must be strings) for any application-specific metadata attached to the message")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"EventTime")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The timestamp associated with the message")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ReplicationClusters")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The clusters to which this message will be replicated. Pulsar brokers handle message replication automatically; you should only change this setting if you want to override the broker default.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"SequenceID")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Set the sequence id to assign to the current message")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"DeliverAfter")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Request to deliver the message only after the specified relative delay")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"DeliverAt")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Deliver the message only at or after the specified absolute timestamp")))),(0,i.kt)("h2",{id:"tls-encryption-and-authentication"},"TLS encryption and authentication"),(0,i.kt)("p",null,"In order to use ",(0,i.kt)("a",{parentName:"p",href:"security-tls-transport"},"TLS encryption"),", you'll need to configure your client to do so:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"pulsar+ssl")," URL type"),(0,i.kt)("li",{parentName:"ul"},"Set ",(0,i.kt)("inlineCode",{parentName:"li"},"TLSTrustCertsFilePath")," to the path to the TLS certs used by your client and the Pulsar broker"),(0,i.kt)("li",{parentName:"ul"},"Configure ",(0,i.kt)("inlineCode",{parentName:"li"},"Authentication")," option")),(0,i.kt)("p",null,"Here's an example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\nopts := pulsar.ClientOptions{\n    URL: "pulsar+ssl://my-cluster.com:6651",\n    TLSTrustCertsFilePath: "/path/to/certs/my-cert.csr",\n    Authentication: NewAuthenticationTLS("my-cert.pem", "my-key.pem"),\n}\n\n')),(0,i.kt)("h2",{id:"oauth2-authentication"},"OAuth2 authentication"),(0,i.kt)("p",null,"To use ",(0,i.kt)("a",{parentName:"p",href:"security-oauth2"},"OAuth2 authentication"),", you'll need to configure your client to perform the following operations.\nThis example shows how to configure OAuth2 authentication."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\noauth := pulsar.NewAuthenticationOAuth2(map[string]string{\n        "type":       "client_credentials",\n        "issuerUrl":  "https://dev-kt-aa9ne.us.auth0.com",\n        "audience":   "https://dev-kt-aa9ne.us.auth0.com/api/v2/",\n        "privateKey": "/path/to/privateKey",\n        "clientId":   "0Xx...Yyxeny",\n    })\nclient, err := pulsar.NewClient(pulsar.ClientOptions{\n        URL:              "pulsar://my-cluster:6650",\n        Authentication:   oauth,\n})\n\n')))}m.isMDXComponent=!0},86010:function(e,t,n){function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}n.d(t,{Z:function(){return r}})}}]);
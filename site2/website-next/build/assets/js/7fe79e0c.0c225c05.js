"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[8367],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=c(n),d=i,k=h["".concat(s,".").concat(d)]||h[d]||p[d]||a;return n?r.createElement(k,o(o({ref:t},u),{},{components:n})):r.createElement(k,o({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},58215:function(e,t,n){var r=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,i=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:i},t)}},55064:function(e,t,n){n.d(t,{Z:function(){return c}});var r=n(67294),i=n(79443);var a=function(){var e=(0,r.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},o=n(86010),l="tabItem_1uMI",s="tabItemActive_2DSg";var c=function(e){var t,n=e.lazy,i=e.block,c=e.defaultValue,u=e.values,p=e.groupId,h=e.className,d=r.Children.toArray(e.children),k=null!=u?u:d.map((function(e){return{value:e.props.value,label:e.props.label}})),m=null!=c?c:null==(t=d.find((function(e){return e.props.default})))?void 0:t.props.value,f=a(),y=f.tabGroupChoices,g=f.setTabGroupChoices,v=(0,r.useState)(m),b=v[0],S=v[1],T=[];if(null!=p){var w=y[p];null!=w&&w!==b&&k.some((function(e){return e.value===w}))&&S(w)}var N=function(e){var t=e.currentTarget,n=T.indexOf(t),r=k[n].value;S(r),null!=p&&(g(p,r),setTimeout((function(){var e,n,r,i,a,o,l,c;(e=t.getBoundingClientRect(),n=e.top,r=e.left,i=e.bottom,a=e.right,o=window,l=o.innerHeight,c=o.innerWidth,n>=0&&a<=c&&i<=l&&r>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(s),setTimeout((function(){return t.classList.remove(s)}),2e3))}),150))},C=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=T.indexOf(e.target)+1;n=T[r]||T[0];break;case"ArrowLeft":var i=T.indexOf(e.target)-1;n=T[i]||T[T.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":i},h)},k.map((function(e){var t=e.value,n=e.label;return r.createElement("li",{role:"tab",tabIndex:b===t?0:-1,"aria-selected":b===t,className:(0,o.Z)("tabs__item",l,{"tabs__item--active":b===t}),key:t,ref:function(e){return T.push(e)},onKeyDown:C,onFocus:N,onClick:N},null!=n?n:t)}))),n?(0,r.cloneElement)(d.filter((function(e){return e.props.value===b}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},d.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==b})}))))}},79443:function(e,t,n){var r=(0,n(67294).createContext)(void 0);t.Z=r},73166:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return h}});var r=n(87462),i=n(63366),a=(n(67294),n(3905)),o=(n(55064),n(58215),["components"]),l={id:"security-tls-keystore",title:"Using TLS with KeyStore configure",sidebar_label:"Using TLS with KeyStore configure",original_id:"security-tls-keystore"},s=void 0,c={unversionedId:"security-tls-keystore",id:"version-2.7.0/security-tls-keystore",isDocsHomePage:!1,title:"Using TLS with KeyStore configure",description:"Overview",source:"@site/versioned_docs/version-2.7.0/security-tls-keystore.md",sourceDirName:".",slug:"/security-tls-keystore",permalink:"/docs/2.7.0/security-tls-keystore",editUrl:"https://github.com/apache/pulsar/edit/master/site2/website-next/versioned_docs/version-2.7.0/security-tls-keystore.md",tags:[],version:"2.7.0",frontMatter:{id:"security-tls-keystore",title:"Using TLS with KeyStore configure",sidebar_label:"Using TLS with KeyStore configure",original_id:"security-tls-keystore"},sidebar:"version-2.7.0/docsSidebar",previous:{title:"Authentication using TLS",permalink:"/docs/2.7.0/security-tls-authentication"},next:{title:"Authentication using JWT",permalink:"/docs/2.7.0/security-jwt"}},u=[{value:"Overview",id:"overview",children:[]},{value:"TLS encryption with KeyStore configure",id:"tls-encryption-with-keystore-configure",children:[{value:"Generate TLS key and certificate",id:"generate-tls-key-and-certificate",children:[]},{value:"Creating your own CA",id:"creating-your-own-ca",children:[]},{value:"Signing the certificate",id:"signing-the-certificate",children:[]},{value:"Configuring brokers",id:"configuring-brokers",children:[]},{value:"Configuring Clients",id:"configuring-clients",children:[]}]},{value:"TLS authentication with KeyStore configure",id:"tls-authentication-with-keystore-configure",children:[{value:"broker authentication config",id:"broker-authentication-config",children:[]},{value:"client authentication configuring",id:"client-authentication-configuring",children:[]}]},{value:"Enabling TLS Logging",id:"enabling-tls-logging",children:[]}],p={toc:u};function h(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Apache Pulsar supports ",(0,a.kt)("a",{parentName:"p",href:"/docs/2.7.0/security-tls-transport"},"TLS encryption")," and ",(0,a.kt)("a",{parentName:"p",href:"security-tls-authentication"},"TLS authentication")," between clients and Apache Pulsar service.\nBy default it uses PEM format file configuration. This page tries to describe use ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Java_KeyStore"},"KeyStore")," type configure for TLS."),(0,a.kt)("h2",{id:"tls-encryption-with-keystore-configure"},"TLS encryption with KeyStore configure"),(0,a.kt)("h3",{id:"generate-tls-key-and-certificate"},"Generate TLS key and certificate"),(0,a.kt)("p",null,"The first step of deploying TLS is to generate the key and the certificate for each machine in the cluster.\nYou can use Java\u2019s ",(0,a.kt)("inlineCode",{parentName:"p"},"keytool")," utility to accomplish this task. We will generate the key into a temporary keystore\ninitially for broker, so that we can export and sign it later with CA."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"\nkeytool -keystore broker.keystore.jks -alias localhost -validity {validity} -genkeypair -keyalg RSA\n\n")),(0,a.kt)("p",null,"You need to specify two parameters in the above command:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"keystore"),": the keystore file that stores the certificate. The ",(0,a.kt)("em",{parentName:"li"},"keystore")," file contains the private key of\nthe certificate; hence, it needs to be kept safely."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"validity"),": the valid time of the certificate in days.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Ensure that common name (CN) matches exactly with the fully qualified domain name (FQDN) of the server.\nThe client compares the CN with the DNS domain name to ensure that it is indeed connecting to the desired server, not a malicious one.")),(0,a.kt)("h3",{id:"creating-your-own-ca"},"Creating your own CA"),(0,a.kt)("p",null,"After the first step, each broker in the cluster has a public-private key pair, and a certificate to identify the machine.\nThe certificate, however, is unsigned, which means that an attacker can create such a certificate to pretend to be any machine."),(0,a.kt)("p",null,"Therefore, it is important to prevent forged certificates by signing them for each machine in the cluster.\nA ",(0,a.kt)("inlineCode",{parentName:"p"},"certificate authority (CA)")," is responsible for signing certificates. CA works likes a government that issues passports \u2014\nthe government stamps (signs) each passport so that the passport becomes difficult to forge. Other governments verify the stamps\nto ensure the passport is authentic. Similarly, the CA signs the certificates, and the cryptography guarantees that a signed\ncertificate is computationally difficult to forge. Thus, as long as the CA is a genuine and trusted authority, the clients have\nhigh assurance that they are connecting to the authentic machines."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"\nopenssl req -new -x509 -keyout ca-key -out ca-cert -days 365\n\n")),(0,a.kt)("p",null,"The generated CA is simply a ",(0,a.kt)("em",{parentName:"p"},"public-private")," key pair and certificate, and it is intended to sign other certificates."),(0,a.kt)("p",null,"The next step is to add the generated CA to the clients' truststore so that the clients can trust this CA:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"\nkeytool -keystore client.truststore.jks -alias CARoot -import -file ca-cert\n\n")),(0,a.kt)("p",null,"NOTE: If you configure the brokers to require client authentication by setting ",(0,a.kt)("inlineCode",{parentName:"p"},"tlsRequireTrustedClientCertOnConnect")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," on the\nbroker configuration, then you must also provide a truststore for the brokers and it should have all the CA certificates that clients keys were signed by."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"\nkeytool -keystore broker.truststore.jks -alias CARoot -import -file ca-cert\n\n")),(0,a.kt)("p",null,"In contrast to the keystore, which stores each machine\u2019s own identity, the truststore of a client stores all the certificates\nthat the client should trust. Importing a certificate into one\u2019s truststore also means trusting all certificates that are signed\nby that certificate. As the analogy above, trusting the government (CA) also means trusting all passports (certificates) that\nit has issued. This attribute is called the chain of trust, and it is particularly useful when deploying TLS on a large BookKeeper cluster.\nYou can sign all certificates in the cluster with a single CA, and have all machines share the same truststore that trusts the CA.\nThat way all machines can authenticate all other machines."),(0,a.kt)("h3",{id:"signing-the-certificate"},"Signing the certificate"),(0,a.kt)("p",null,"The next step is to sign all certificates in the keystore with the CA we generated. First, you need to export the certificate from the keystore:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"\nkeytool -keystore broker.keystore.jks -alias localhost -certreq -file cert-file\n\n")),(0,a.kt)("p",null,"Then sign it with the CA:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"\nopenssl x509 -req -CA ca-cert -CAkey ca-key -in cert-file -out cert-signed -days {validity} -CAcreateserial -passin pass:{ca-password}\n\n")),(0,a.kt)("p",null,"Finally, you need to import both the certificate of the CA and the signed certificate into the keystore:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"\nkeytool -keystore broker.keystore.jks -alias CARoot -import -file ca-cert\nkeytool -keystore broker.keystore.jks -alias localhost -import -file cert-signed\n\n")),(0,a.kt)("p",null,"The definitions of the parameters are the following:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"keystore"),": the location of the keystore"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"ca-cert"),": the certificate of the CA"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"ca-key"),": the private key of the CA"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"ca-password"),": the passphrase of the CA"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"cert-file"),": the exported, unsigned certificate of the broker"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"cert-signed"),": the signed certificate of the broker")),(0,a.kt)("h3",{id:"configuring-brokers"},"Configuring brokers"),(0,a.kt)("p",null,"Brokers enable TLS by provide valid ",(0,a.kt)("inlineCode",{parentName:"p"},"brokerServicePortTls")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"webServicePortTls"),", and also need set ",(0,a.kt)("inlineCode",{parentName:"p"},"tlsEnabledWithKeyStore")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," for using KeyStore type configuration.\nBesides this, KeyStore path,  KeyStore password, TrustStore path, and TrustStore password need to provided.\nAnd since broker will create internal client/admin client to communicate with other brokers, user also need to provide config for them, this is similar to how user config the outside client/admin-client.\nIf ",(0,a.kt)("inlineCode",{parentName:"p"},"tlsRequireTrustedClientCertOnConnect")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", broker will reject the Connection if the Client Certificate is not trusted. "),(0,a.kt)("p",null,"The following TLS configs are needed on the broker side:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-properties"},"\ntlsEnabledWithKeyStore=true\n# key store\ntlsKeyStoreType=JKS\ntlsKeyStore=/var/private/tls/broker.keystore.jks\ntlsKeyStorePassword=brokerpw\n\n# trust store\ntlsTrustStoreType=JKS\ntlsTrustStore=/var/private/tls/broker.truststore.jks\ntlsTrustStorePassword=brokerpw\n\n# internal client/admin-client config\nbrokerClientTlsEnabled=true\nbrokerClientTlsEnabledWithKeyStore=true\nbrokerClientTlsTrustStoreType=JKS\nbrokerClientTlsTrustStore=/var/private/tls/client.truststore.jks\nbrokerClientTlsTrustStorePassword=clientpw\n\n")),(0,a.kt)("p",null,"NOTE: it is important to restrict access to the store files via filesystem permissions."),(0,a.kt)("p",null,"Optional settings that may worth consider:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"tlsClientAuthentication=false: Enable/Disable using TLS for authentication. This config when enabled will authenticate the other end\nof the communication channel. It should be enabled on both brokers and clients for mutual TLS."),(0,a.kt)("li",{parentName:"ol"},"tlsCiphers=","[TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]",", A cipher suite is a named combination of authentication, encryption, MAC and key exchange\nalgorithm used to negotiate the security settings for a network connection using TLS network protocol. By default,\nit is null. ",(0,a.kt)("a",{parentName:"li",href:"https://www.openssl.org/docs/man1.0.2/apps/ciphers.html"},"OpenSSL Ciphers"),(0,a.kt)("a",{parentName:"li",href:"http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#ciphersuites"},"JDK Ciphers")),(0,a.kt)("li",{parentName:"ol"},"tlsProtocols=","[TLSv1.2,TLSv1.1,TLSv1]"," (list out the TLS protocols that you are going to accept from clients).\nBy default, it is not set.")),(0,a.kt)("h3",{id:"configuring-clients"},"Configuring Clients"),(0,a.kt)("p",null,"This is similar to ","[TLS encryption configuing for client with PEM type]","(/docs/2.7.0/security-tls-transport#Client configuration).\nFor a a minimal configuration, user need to provide the TrustStore information."),(0,a.kt)("p",null,"e.g. "),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"for ",(0,a.kt)("a",{parentName:"p",href:"reference-cli-tools"},"Command-line tools")," like ",(0,a.kt)("a",{parentName:"p",href:"reference-cli-tools#pulsar-admin"},(0,a.kt)("inlineCode",{parentName:"a"},"pulsar-admin")),", ",(0,a.kt)("a",{parentName:"p",href:"reference-cli-tools#pulsar-perf"},(0,a.kt)("inlineCode",{parentName:"a"},"pulsar-perf")),", and ",(0,a.kt)("a",{parentName:"p",href:"reference-cli-tools#pulsar-client"},(0,a.kt)("inlineCode",{parentName:"a"},"pulsar-client"))," use the ",(0,a.kt)("inlineCode",{parentName:"p"},"conf/client.conf")," config file in a Pulsar installation."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-properties"},"\nwebServiceUrl=https://broker.example.com:8443/\nbrokerServiceUrl=pulsar+ssl://broker.example.com:6651/\nuseKeyStoreTls=true\ntlsTrustStoreType=JKS\ntlsTrustStorePath=/var/private/tls/client.truststore.jks\ntlsTrustStorePassword=clientpw\n\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"for java client"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'\nimport org.apache.pulsar.client.api.PulsarClient;\n\nPulsarClient client = PulsarClient.builder()\n    .serviceUrl("pulsar+ssl://broker.example.com:6651/")\n    .enableTls(true)\n    .useKeyStoreTls(true)\n    .tlsTrustStorePath("/var/private/tls/client.truststore.jks")\n    .tlsTrustStorePassword("clientpw")\n    .allowTlsInsecureConnection(false)\n    .build();\n\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"for java admin client"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'\n    PulsarAdmin amdin = PulsarAdmin.builder().serviceHttpUrl("https://broker.example.com:8443")\n                .useKeyStoreTls(true)\n                .tlsTrustStorePath("/var/private/tls/client.truststore.jks")\n                .tlsTrustStorePassword("clientpw")\n                .allowTlsInsecureConnection(false)\n                .build();\n\n')),(0,a.kt)("h2",{id:"tls-authentication-with-keystore-configure"},"TLS authentication with KeyStore configure"),(0,a.kt)("p",null,"This similar to ",(0,a.kt)("a",{parentName:"p",href:"security-tls-authentication"},"TLS authentication with PEM type")),(0,a.kt)("h3",{id:"broker-authentication-config"},"broker authentication config"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"broker.conf")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-properties"},"\n# Configuration to enable authentication\nauthenticationEnabled=true\nauthenticationProviders=org.apache.pulsar.broker.authentication.AuthenticationProviderTls\n\n# this should be the CN for one of client keystore.\nsuperUserRoles=admin\n\n# Enable KeyStore type\ntlsEnabledWithKeyStore=true\nrequireTrustedClientCertOnConnect=true\n\n# key store\ntlsKeyStoreType=JKS\ntlsKeyStore=/var/private/tls/broker.keystore.jks\ntlsKeyStorePassword=brokerpw\n\n# trust store\ntlsTrustStoreType=JKS\ntlsTrustStore=/var/private/tls/broker.truststore.jks\ntlsTrustStorePassword=brokerpw\n\n# internal client/admin-client config\nbrokerClientTlsEnabled=true\nbrokerClientTlsEnabledWithKeyStore=true\nbrokerClientTlsTrustStoreType=JKS\nbrokerClientTlsTrustStore=/var/private/tls/client.truststore.jks\nbrokerClientTlsTrustStorePassword=clientpw\n# internal auth config\nbrokerClientAuthenticationPlugin=org.apache.pulsar.client.impl.auth.AuthenticationKeyStoreTls\nbrokerClientAuthenticationParameters=keyStoreType:JKS,keyStorePath:/var/private/tls/client.keystore.jks,keyStorePassword:clientpw\n# currently websocket not support keystore type\nwebSocketServiceEnabled=false\n\n")),(0,a.kt)("h3",{id:"client-authentication-configuring"},"client authentication configuring"),(0,a.kt)("p",null,"Besides the TLS encryption configuring. The main work is configuring the KeyStore, which contains a valid CN as client role, for client."),(0,a.kt)("p",null,"e.g. "),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"for ",(0,a.kt)("a",{parentName:"p",href:"reference-cli-tools"},"Command-line tools")," like ",(0,a.kt)("a",{parentName:"p",href:"reference-cli-tools#pulsar-admin"},(0,a.kt)("inlineCode",{parentName:"a"},"pulsar-admin")),", ",(0,a.kt)("a",{parentName:"p",href:"reference-cli-tools#pulsar-perf"},(0,a.kt)("inlineCode",{parentName:"a"},"pulsar-perf")),", and ",(0,a.kt)("a",{parentName:"p",href:"reference-cli-tools#pulsar-client"},(0,a.kt)("inlineCode",{parentName:"a"},"pulsar-client"))," use the ",(0,a.kt)("inlineCode",{parentName:"p"},"conf/client.conf")," config file in a Pulsar installation."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-properties"},"\nwebServiceUrl=https://broker.example.com:8443/\nbrokerServiceUrl=pulsar+ssl://broker.example.com:6651/\nuseKeyStoreTls=true\ntlsTrustStoreType=JKS\ntlsTrustStorePath=/var/private/tls/client.truststore.jks\ntlsTrustStorePassword=clientpw\nauthPlugin=org.apache.pulsar.client.impl.auth.AuthenticationKeyStoreTls\nauthParams=keyStoreType:JKS,keyStorePath:/var/private/tls/client.keystore.jks,keyStorePassword:clientpw\n\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"for java client"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'\nimport org.apache.pulsar.client.api.PulsarClient;\n\nPulsarClient client = PulsarClient.builder()\n    .serviceUrl("pulsar+ssl://broker.example.com:6651/")\n    .enableTls(true)\n    .useKeyStoreTls(true)\n    .tlsTrustStorePath("/var/private/tls/client.truststore.jks")\n    .tlsTrustStorePassword("clientpw")\n    .allowTlsInsecureConnection(false)\n    .authentication(\n            "org.apache.pulsar.client.impl.auth.AuthenticationKeyStoreTls",\n            "keyStoreType:JKS,keyStorePath:/var/private/tls/client.keystore.jks,keyStorePassword:clientpw")\n    .build();\n\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"for java admin client"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'\n    PulsarAdmin amdin = PulsarAdmin.builder().serviceHttpUrl("https://broker.example.com:8443")\n        .useKeyStoreTls(true)\n        .tlsTrustStorePath("/var/private/tls/client.truststore.jks")\n        .tlsTrustStorePassword("clientpw")\n        .allowTlsInsecureConnection(false)\n        .authentication(\n               "org.apache.pulsar.client.impl.auth.AuthenticationKeyStoreTls",\n               "keyStoreType:JKS,keyStorePath:/var/private/tls/client.keystore.jks,keyStorePassword:clientpw")\n        .build();\n\n')))),(0,a.kt)("h2",{id:"enabling-tls-logging"},"Enabling TLS Logging"),(0,a.kt)("p",null,"You can enable TLS debug logging at the JVM level by starting the brokers and/or clients with ",(0,a.kt)("inlineCode",{parentName:"p"},"javax.net.debug")," system property. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"\n-Djavax.net.debug=all\n\n")),(0,a.kt)("p",null,"You can find more details on this in ",(0,a.kt)("a",{parentName:"p",href:"http://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/ReadDebug.html"},"Oracle documentation")," on ",(0,a.kt)("a",{parentName:"p",href:"http://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/ReadDebug.html"},"debugging SSL/TLS connections"),"."))}h.isMDXComponent=!0},86010:function(e,t,n){function r(e){var t,n,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(i&&(i+=" "),i+=n);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}function i(){for(var e,t,n=0,i="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(i&&(i+=" "),i+=t);return i}n.d(t,{Z:function(){return i}})}}]);
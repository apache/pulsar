"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[28416],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||l;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},58215:function(e,t,n){var a=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},55064:function(e,t,n){n.d(t,{Z:function(){return c}});var a=n(67294),r=n(79443);var l=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},i=n(86010),o="tabItem_1uMI",s="tabItemActive_2DSg";var c=function(e){var t,n=e.lazy,r=e.block,c=e.defaultValue,u=e.values,d=e.groupId,p=e.className,m=a.Children.toArray(e.children),h=null!=u?u:m.map((function(e){return{value:e.props.value,label:e.props.label}})),k=null!=c?c:null==(t=m.find((function(e){return e.props.default})))?void 0:t.props.value,g=l(),N=g.tabGroupChoices,f=g.setTabGroupChoices,b=(0,a.useState)(k),v=b[0],y=b[1],w=[];if(null!=d){var C=N[d];null!=C&&C!==v&&h.some((function(e){return e.value===C}))&&y(C)}var T=function(e){var t=e.currentTarget,n=w.indexOf(t),a=h[n].value;y(a),null!=d&&(f(d,a),setTimeout((function(){var e,n,a,r,l,i,o,c;(e=t.getBoundingClientRect(),n=e.top,a=e.left,r=e.bottom,l=e.right,i=window,o=i.innerHeight,c=i.innerWidth,n>=0&&l<=c&&r<=o&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(s),setTimeout((function(){return t.classList.remove(s)}),2e3))}),150))},P=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=w.indexOf(e.target)+1;n=w[a]||w[0];break;case"ArrowLeft":var r=w.indexOf(e.target)-1;n=w[r]||w[w.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":r},p)},h.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,className:(0,i.Z)("tabs__item",o,{"tabs__item--active":v===t}),key:t,ref:function(e){return w.push(e)},onKeyDown:P,onFocus:T,onClick:T},null!=n?n:t)}))),n?(0,a.cloneElement)(m.filter((function(e){return e.props.value===v}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},m.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==v})}))))}},79443:function(e,t,n){var a=(0,n(67294).createContext)(void 0);t.Z=a},70519:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var a=n(87462),r=n(63366),l=(n(67294),n(3905)),i=(n(55064),n(58215),["components"]),o={id:"client-libraries-dotnet",title:"Pulsar C# client",sidebar_label:"C#",original_id:"client-libraries-dotnet"},s=void 0,c={unversionedId:"client-libraries-dotnet",id:"version-2.7.0/client-libraries-dotnet",isDocsHomePage:!1,title:"Pulsar C# client",description:"You can use the Pulsar C# client (DotPulsar) to create Pulsar producers and consumers in C#. All the methods in the producer, consumer, and reader of a C# client are thread-safe. The official documentation for DotPulsar is available here.",source:"@site/versioned_docs/version-2.7.0/client-libraries-dotnet.md",sourceDirName:".",slug:"/client-libraries-dotnet",permalink:"/docs/2.7.0/client-libraries-dotnet",editUrl:"https://github.com/apache/pulsar/edit/master/site2/website-next/versioned_docs/version-2.7.0/client-libraries-dotnet.md",tags:[],version:"2.7.0",frontMatter:{id:"client-libraries-dotnet",title:"Pulsar C# client",sidebar_label:"C#",original_id:"client-libraries-dotnet"},sidebar:"version-2.7.0/docsSidebar",previous:{title:"WebSocket",permalink:"/docs/2.7.0/client-libraries-websocket"},next:{title:"Overview",permalink:"/docs/2.7.0/admin-api-overview"}},u=[{value:"Installation",id:"installation",children:[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Procedures",id:"procedures",children:[]}]},{value:"Client",id:"client",children:[{value:"Create client",id:"create-client",children:[]},{value:"Create producer",id:"create-producer",children:[]},{value:"Create consumer",id:"create-consumer",children:[]},{value:"Create reader",id:"create-reader",children:[]},{value:"Configure encryption policies",id:"configure-encryption-policies",children:[]},{value:"Configure authentication",id:"configure-authentication",children:[]}]},{value:"Producer",id:"producer",children:[]},{value:"Send data",id:"send-data",children:[{value:"Send messages with customized metadata",id:"send-messages-with-customized-metadata",children:[]}]},{value:"Consumer",id:"consumer",children:[{value:"Receive messages",id:"receive-messages",children:[]},{value:"Acknowledge messages",id:"acknowledge-messages",children:[]},{value:"Unsubscribe from topics",id:"unsubscribe-from-topics",children:[]}]},{value:"Reader",id:"reader",children:[]},{value:"Monitoring",id:"monitoring",children:[{value:"Monitor producer",id:"monitor-producer",children:[]},{value:"Monitor consumer state",id:"monitor-consumer-state",children:[]},{value:"Monitor reader state",id:"monitor-reader-state",children:[]}]}],d={toc:u};function p(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"You can use the Pulsar C# client (DotPulsar) to create Pulsar producers and consumers in C#. All the methods in the producer, consumer, and reader of a C# client are thread-safe. The official documentation for DotPulsar is available ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/apache/pulsar-dotpulsar/wiki"},"here"),"."),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("p",null,"You can install the Pulsar C# client library either through the dotnet CLI or through the Visual Studio. This section describes how to install the Pulsar C# client library through the dotnet CLI. For information about how to install the Pulsar C# client library through the Visual Studio , see ",(0,l.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/visualstudio/mac/nuget-walkthrough?view=vsmac-2019"},"here"),"."),(0,l.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("p",null,"Install the ",(0,l.kt)("a",{parentName:"p",href:"https://dotnet.microsoft.com/download/"},".NET Core SDK"),", which provides the dotnet command-line tool. Starting in Visual Studio 2017, the dotnet CLI is automatically installed with any .NET Core related workloads."),(0,l.kt)("h3",{id:"procedures"},"Procedures"),(0,l.kt)("p",null,"To install the Pulsar C# client library, following these steps:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Create a project."),(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Create a folder for the project.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Open a terminal window and switch to the new folder.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Create the project using the following command."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"\ndotnet new console\n\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"dotnet run")," to test that the app has been created properly.")))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Add the DotPulsar NuGet package."),(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Use the following command to install the ",(0,l.kt)("inlineCode",{parentName:"p"},"DotPulsar")," package."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"\ndotnet add package DotPulsar\n\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"After the command completes, open the ",(0,l.kt)("inlineCode",{parentName:"p"},".csproj")," file to see the added reference."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-xml"},'\n<ItemGroup>\n  <PackageReference Include="DotPulsar" Version="0.11.0" />\n</ItemGroup>\n\n')))))),(0,l.kt)("h2",{id:"client"},"Client"),(0,l.kt)("p",null,"This section describes some configuration examples for the Pulsar C# client."),(0,l.kt)("h3",{id:"create-client"},"Create client"),(0,l.kt)("p",null,"This example shows how to create a Pulsar C# client connected to localhost."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c#"},"\nvar client = PulsarClient.Builder().Build();\n\n")),(0,l.kt)("p",null,"To create a Pulsar C# client by using the builder, you can specify the following options."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Option"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ServiceUrl"),(0,l.kt)("td",{parentName:"tr",align:null},"Set the service URL for the Pulsar cluster."),(0,l.kt)("td",{parentName:"tr",align:null},"pulsar://localhost:6650")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"RetryInterval"),(0,l.kt)("td",{parentName:"tr",align:null},"Set the time to wait before retrying an operation or a reconnection."),(0,l.kt)("td",{parentName:"tr",align:null},"3s")))),(0,l.kt)("h3",{id:"create-producer"},"Create producer"),(0,l.kt)("p",null,"This section describes how to create a producer."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Create a producer by using the builder."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-c#"},'\nvar producer = client.NewProducer()\n                     .Topic("persistent://public/default/mytopic")\n                     .Create();\n\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Create a producer without using the builder."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-c#"},'\nvar options = new ProducerOptions("persistent://public/default/mytopic");\nvar producer = client.CreateProducer(options);\n\n')))),(0,l.kt)("h3",{id:"create-consumer"},"Create consumer"),(0,l.kt)("p",null,"This section describes how to create a consumer."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Create a consumer by using the builder."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-c#"},'\nvar consumer = client.NewConsumer()\n                     .SubscriptionName("MySubscription")\n                     .Topic("persistent://public/default/mytopic")\n                     .Create();\n\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Create a consumer without using the builder."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-c#"},'\nvar options = new ConsumerOptions("MySubscription", "persistent://public/default/mytopic");\nvar consumer = client.CreateConsumer(options);\n\n')))),(0,l.kt)("h3",{id:"create-reader"},"Create reader"),(0,l.kt)("p",null,"This section describes how to create a reader."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Create a reader by using the builder."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-c#"},'\nvar reader = client.NewReader()\n                   .StartMessageId(MessageId.Earliest)\n                   .Topic("persistent://public/default/mytopic")\n                   .Create();\n\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Create a reader without using the builder."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-c#"},'\nvar options = new ReaderOptions(MessageId.Earliest, "persistent://public/default/mytopic");\nvar reader = client.CreateReader(options);\n\n')))),(0,l.kt)("h3",{id:"configure-encryption-policies"},"Configure encryption policies"),(0,l.kt)("p",null,"The Pulsar C# client supports four kinds of encryption policies:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"EnforceUnencrypted"),": always use unencrypted connections."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"EnforceEncrypted"),": always use encrypted connections)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"PreferUnencrypted"),": use unencrypted connections, if possible."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"PreferEncrypted"),": use encrypted connections, if possible.")),(0,l.kt)("p",null,"This example shows how to set the ",(0,l.kt)("inlineCode",{parentName:"p"},"EnforceUnencrypted")," encryption policy."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c#"},"\nvar client = PulsarClient.Builder()\n                         .ConnectionSecurity(EncryptionPolicy.EnforceEncrypted)\n                         .Build();\n\n")),(0,l.kt)("h3",{id:"configure-authentication"},"Configure authentication"),(0,l.kt)("p",null,"Currently, the Pulsar C# client supports the TLS (Transport Layer Security) and JWT (JSON Web Token) authentication."),(0,l.kt)("p",null,"If you have followed ",(0,l.kt)("a",{parentName:"p",href:"security-tls-authentication"},"Authentication using TLS"),", you get a certificate and a key. To use them from the Pulsar C# client, follow these steps:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Create an unencrypted and password-less pfx file."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-c#"},"\nopenssl pkcs12 -export -keypbe NONE -certpbe NONE -out admin.pfx -inkey admin.key.pem -in admin.cert.pem -passout pass:\n\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Use the admin.pfx file to create an X509Certificate2 and pass it to the Pulsar C# client."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-c#"},'\nvar clientCertificate = new X509Certificate2("admin.pfx");\nvar client = PulsarClient.Builder()\n                         .AuthenticateUsingClientCertificate(clientCertificate)\n                         .Build();\n\n')))),(0,l.kt)("h2",{id:"producer"},"Producer"),(0,l.kt)("p",null,"A producer is a process that attaches to a topic and publishes messages to a Pulsar broker for processing. This section describes some configuration examples about the producer."),(0,l.kt)("h2",{id:"send-data"},"Send data"),(0,l.kt)("p",null,"This example shows how to send data."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c#"},'\nvar data = Encoding.UTF8.GetBytes("Hello World");\nawait producer.Send(data);\n\n')),(0,l.kt)("h3",{id:"send-messages-with-customized-metadata"},"Send messages with customized metadata"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Send messages with customized metadata by using the builder."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-c#"},'\nvar data = Encoding.UTF8.GetBytes("Hello World");\nvar messageId = await producer.NewMessage()\n                              .Property("SomeKey", "SomeValue")\n                              .Send(data);\n\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Send messages with customized metadata without using the builder."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-c#"},'\nvar data = Encoding.UTF8.GetBytes("Hello World");\nvar metadata = new MessageMetadata();\nmetadata["SomeKey"] = "SomeValue";\nvar messageId = await producer.Send(metadata, data));\n\n')))),(0,l.kt)("h2",{id:"consumer"},"Consumer"),(0,l.kt)("p",null,"A consumer is a process that attaches to a topic through a subscription and then receives messages. This section describes some configuration examples about the consumer."),(0,l.kt)("h3",{id:"receive-messages"},"Receive messages"),(0,l.kt)("p",null,"This example shows how a consumer receives messages from a topic."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c#"},'\nawait foreach (var message in consumer.Messages())\n{\n    Console.WriteLine("Received: " + Encoding.UTF8.GetString(message.Data.ToArray()));\n}\n\n')),(0,l.kt)("h3",{id:"acknowledge-messages"},"Acknowledge messages"),(0,l.kt)("p",null,"Messages can be acknowledged individually or cumulatively. For details about message acknowledgement, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/2.7.0/concepts-messaging#acknowledgement"},"acknowledgement"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Acknowledge messages individually."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-c#"},'\nawait foreach (var message in consumer.Messages())\n{\n    Console.WriteLine("Received: " + Encoding.UTF8.GetString(message.Data.ToArray()));\n}\n\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Acknowledge messages cumulatively."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-c#"},"\nawait consumer.AcknowledgeCumulative(message);\n\n")))),(0,l.kt)("h3",{id:"unsubscribe-from-topics"},"Unsubscribe from topics"),(0,l.kt)("p",null,"This example shows how a consumer unsubscribes from a topic."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c#"},"\nawait consumer.Unsubscribe();\n\n")),(0,l.kt)("h4",{id:"note"},"Note"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"A consumer cannot be used and is disposed once the consumer unsubscribes from a topic.")),(0,l.kt)("h2",{id:"reader"},"Reader"),(0,l.kt)("p",null,"A reader is actually just a consumer without a cursor. This means that Pulsar does not keep track of your progress and there is no need to acknowledge messages."),(0,l.kt)("p",null,"This example shows how a reader receives messages."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c#"},'\nawait foreach (var message in reader.Messages())\n{\n    Console.WriteLine("Received: " + Encoding.UTF8.GetString(message.Data.ToArray()));\n}\n\n')),(0,l.kt)("h2",{id:"monitoring"},"Monitoring"),(0,l.kt)("p",null,"This section describes how to monitor the producer, consumer, and reader state."),(0,l.kt)("h3",{id:"monitor-producer"},"Monitor producer"),(0,l.kt)("p",null,"The following table lists states available for the producer."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"State"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Closed"),(0,l.kt)("td",{parentName:"tr",align:null},"The producer or the Pulsar client has been disposed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Connected"),(0,l.kt)("td",{parentName:"tr",align:null},"All is well.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Disconnected"),(0,l.kt)("td",{parentName:"tr",align:null},"The connection is lost and attempts are being made to reconnect.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Faulted"),(0,l.kt)("td",{parentName:"tr",align:null},"An unrecoverable error has occurred.")))),(0,l.kt)("p",null,"This example shows how to monitor the producer state."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c#"},'\nprivate static async ValueTask Monitor(IProducer producer, CancellationToken cancellationToken)\n{\n    var state = ProducerState.Disconnected;\n\n    while (!cancellationToken.IsCancellationRequested)\n    {\n        state = await producer.StateChangedFrom(state, cancellationToken);\n\n        var stateMessage = state switch\n        {\n            ProducerState.Connected => $"The producer is connected",\n            ProducerState.Disconnected => $"The producer is disconnected",\n            ProducerState.Closed => $"The producer has closed",\n            ProducerState.Faulted => $"The producer has faulted",\n            _ => $"The producer has an unknown state \'{state}\'"\n        };\n\n        Console.WriteLine(stateMessage);\n\n        if (producer.IsFinalState(state))\n            return;\n    }\n}\n\n')),(0,l.kt)("h3",{id:"monitor-consumer-state"},"Monitor consumer state"),(0,l.kt)("p",null,"The following table lists states available for the consumer."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"State"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Active"),(0,l.kt)("td",{parentName:"tr",align:null},"All is well.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Inactive"),(0,l.kt)("td",{parentName:"tr",align:null},"All is well. The subscription type is ",(0,l.kt)("inlineCode",{parentName:"td"},"Failover")," and you are not the active consumer.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Closed"),(0,l.kt)("td",{parentName:"tr",align:null},"The consumer or the Pulsar client has been disposed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Disconnected"),(0,l.kt)("td",{parentName:"tr",align:null},"The connection is lost and attempts are being made to reconnect.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Faulted"),(0,l.kt)("td",{parentName:"tr",align:null},"An unrecoverable error has occurred.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ReachedEndOfTopic"),(0,l.kt)("td",{parentName:"tr",align:null},"No more messages are delivered.")))),(0,l.kt)("p",null,"This example shows how to monitor the consumer state."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c#"},'\nprivate static async ValueTask Monitor(IConsumer consumer, CancellationToken cancellationToken)\n{\n    var state = ConsumerState.Disconnected;\n\n    while (!cancellationToken.IsCancellationRequested)\n    {\n        state = await consumer.StateChangedFrom(state, cancellationToken);\n\n        var stateMessage = state switch\n        {\n            ConsumerState.Active => "The consumer is active",\n            ConsumerState.Inactive => "The consumer is inactive",\n            ConsumerState.Disconnected => "The consumer is disconnected",\n            ConsumerState.Closed => "The consumer has closed",\n            ConsumerState.ReachedEndOfTopic => "The consumer has reached end of topic",\n            ConsumerState.Faulted => "The consumer has faulted",\n            _ => $"The consumer has an unknown state \'{state}\'"\n        };\n\n        Console.WriteLine(stateMessage);\n\n        if (consumer.IsFinalState(state))\n            return;\n    }\n}\n\n')),(0,l.kt)("h3",{id:"monitor-reader-state"},"Monitor reader state"),(0,l.kt)("p",null,"The following table lists states available for the reader."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"State"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Closed"),(0,l.kt)("td",{parentName:"tr",align:null},"The reader or the Pulsar client has been disposed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Connected"),(0,l.kt)("td",{parentName:"tr",align:null},"All is well.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Disconnected"),(0,l.kt)("td",{parentName:"tr",align:null},"The connection is lost and attempts are being made to reconnect.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Faulted"),(0,l.kt)("td",{parentName:"tr",align:null},"An unrecoverable error has occurred.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ReachedEndOfTopic"),(0,l.kt)("td",{parentName:"tr",align:null},"No more messages are delivered.")))),(0,l.kt)("p",null,"This example shows how to monitor the reader state."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c#"},'\nprivate static async ValueTask Monitor(IReader reader, CancellationToken cancellationToken)\n{\n    var state = ReaderState.Disconnected;\n\n    while (!cancellationToken.IsCancellationRequested)\n    {\n        state = await reader.StateChangedFrom(state, cancellationToken);\n\n        var stateMessage = state switch\n        {\n            ReaderState.Connected => "The reader is connected",\n            ReaderState.Disconnected => "The reader is disconnected",\n            ReaderState.Closed => "The reader has closed",\n            ReaderState.ReachedEndOfTopic => "The reader has reached end of topic",\n            ReaderState.Faulted => "The reader has faulted",\n            _ => $"The reader has an unknown state \'{state}\'"\n        };\n\n        Console.WriteLine(stateMessage);\n\n        if (reader.IsFinalState(state))\n            return;\n    }\n}\n\n')))}p.isMDXComponent=!0},86010:function(e,t,n){function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}n.d(t,{Z:function(){return r}})}}]);
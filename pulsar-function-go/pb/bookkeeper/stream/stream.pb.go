//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.15.8
// source: stream.proto

package stream

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RangeState int32

const (
	RangeState_RANGE_ACTIVE  RangeState = 0
	RangeState_RANGE_FENCING RangeState = 1
	RangeState_RANGE_FENCED  RangeState = 2
)

// Enum value maps for RangeState.
var (
	RangeState_name = map[int32]string{
		0: "RANGE_ACTIVE",
		1: "RANGE_FENCING",
		2: "RANGE_FENCED",
	}
	RangeState_value = map[string]int32{
		"RANGE_ACTIVE":  0,
		"RANGE_FENCING": 1,
		"RANGE_FENCED":  2,
	}
)

func (x RangeState) Enum() *RangeState {
	p := new(RangeState)
	*p = x
	return p
}

func (x RangeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RangeState) Descriptor() protoreflect.EnumDescriptor {
	return file_stream_proto_enumTypes[0].Descriptor()
}

func (RangeState) Type() protoreflect.EnumType {
	return &file_stream_proto_enumTypes[0]
}

func (x RangeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RangeState.Descriptor instead.
func (RangeState) EnumDescriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{0}
}

type RangeKeyType int32

const (
	RangeKeyType_NULL RangeKeyType = 0
	RangeKeyType_HASH RangeKeyType = 1
	RangeKeyType_RAW  RangeKeyType = 2 // reserved, not implemented yet
)

// Enum value maps for RangeKeyType.
var (
	RangeKeyType_name = map[int32]string{
		0: "NULL",
		1: "HASH",
		2: "RAW",
	}
	RangeKeyType_value = map[string]int32{
		"NULL": 0,
		"HASH": 1,
		"RAW":  2,
	}
)

func (x RangeKeyType) Enum() *RangeKeyType {
	p := new(RangeKeyType)
	*p = x
	return p
}

func (x RangeKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RangeKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_stream_proto_enumTypes[1].Descriptor()
}

func (RangeKeyType) Type() protoreflect.EnumType {
	return &file_stream_proto_enumTypes[1]
}

func (x RangeKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RangeKeyType.Descriptor instead.
func (RangeKeyType) EnumDescriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{1}
}

// since stream and table are similar and exchangable,
// from the beginning, we shared the metadata management
// between streams and tables and distinguish them using
// a flag that recorded in metadata.
type StorageType int32

const (
	StorageType_STREAM StorageType = 0
	StorageType_TABLE  StorageType = 1
)

// Enum value maps for StorageType.
var (
	StorageType_name = map[int32]string{
		0: "STREAM",
		1: "TABLE",
	}
	StorageType_value = map[string]int32{
		"STREAM": 0,
		"TABLE":  1,
	}
)

func (x StorageType) Enum() *StorageType {
	p := new(StorageType)
	*p = x
	return p
}

func (x StorageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageType) Descriptor() protoreflect.EnumDescriptor {
	return file_stream_proto_enumTypes[2].Descriptor()
}

func (StorageType) Type() protoreflect.EnumType {
	return &file_stream_proto_enumTypes[2]
}

func (x StorageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageType.Descriptor instead.
func (StorageType) EnumDescriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{2}
}

type SplitPolicyType int32

const (
	SplitPolicyType_FIXED     SplitPolicyType = 0
	SplitPolicyType_BANDWIDTH SplitPolicyType = 1
)

// Enum value maps for SplitPolicyType.
var (
	SplitPolicyType_name = map[int32]string{
		0: "FIXED",
		1: "BANDWIDTH",
	}
	SplitPolicyType_value = map[string]int32{
		"FIXED":     0,
		"BANDWIDTH": 1,
	}
)

func (x SplitPolicyType) Enum() *SplitPolicyType {
	p := new(SplitPolicyType)
	*p = x
	return p
}

func (x SplitPolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SplitPolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_stream_proto_enumTypes[3].Descriptor()
}

func (SplitPolicyType) Type() protoreflect.EnumType {
	return &file_stream_proto_enumTypes[3]
}

func (x SplitPolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SplitPolicyType.Descriptor instead.
func (SplitPolicyType) EnumDescriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{3}
}

type StreamMetadata_LifecycleState int32

const (
	StreamMetadata_UNINIT   StreamMetadata_LifecycleState = 0
	StreamMetadata_CREATING StreamMetadata_LifecycleState = 1
	StreamMetadata_CREATED  StreamMetadata_LifecycleState = 2
	StreamMetadata_FENCING  StreamMetadata_LifecycleState = 3
	StreamMetadata_FENCED   StreamMetadata_LifecycleState = 4
)

// Enum value maps for StreamMetadata_LifecycleState.
var (
	StreamMetadata_LifecycleState_name = map[int32]string{
		0: "UNINIT",
		1: "CREATING",
		2: "CREATED",
		3: "FENCING",
		4: "FENCED",
	}
	StreamMetadata_LifecycleState_value = map[string]int32{
		"UNINIT":   0,
		"CREATING": 1,
		"CREATED":  2,
		"FENCING":  3,
		"FENCED":   4,
	}
)

func (x StreamMetadata_LifecycleState) Enum() *StreamMetadata_LifecycleState {
	p := new(StreamMetadata_LifecycleState)
	*p = x
	return p
}

func (x StreamMetadata_LifecycleState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamMetadata_LifecycleState) Descriptor() protoreflect.EnumDescriptor {
	return file_stream_proto_enumTypes[4].Descriptor()
}

func (StreamMetadata_LifecycleState) Type() protoreflect.EnumType {
	return &file_stream_proto_enumTypes[4]
}

func (x StreamMetadata_LifecycleState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamMetadata_LifecycleState.Descriptor instead.
func (StreamMetadata_LifecycleState) EnumDescriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{17, 0}
}

type StreamMetadata_ServingState int32

const (
	StreamMetadata_WRITABLE StreamMetadata_ServingState = 0
	StreamMetadata_READONLY StreamMetadata_ServingState = 1
)

// Enum value maps for StreamMetadata_ServingState.
var (
	StreamMetadata_ServingState_name = map[int32]string{
		0: "WRITABLE",
		1: "READONLY",
	}
	StreamMetadata_ServingState_value = map[string]int32{
		"WRITABLE": 0,
		"READONLY": 1,
	}
)

func (x StreamMetadata_ServingState) Enum() *StreamMetadata_ServingState {
	p := new(StreamMetadata_ServingState)
	*p = x
	return p
}

func (x StreamMetadata_ServingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamMetadata_ServingState) Descriptor() protoreflect.EnumDescriptor {
	return file_stream_proto_enumTypes[5].Descriptor()
}

func (StreamMetadata_ServingState) Type() protoreflect.EnumType {
	return &file_stream_proto_enumTypes[5]
}

func (x StreamMetadata_ServingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamMetadata_ServingState.Descriptor instead.
func (StreamMetadata_ServingState) EnumDescriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{17, 1}
}

type RangeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScId     int64 `protobuf:"varint,1,opt,name=sc_id,json=scId,proto3" json:"sc_id,omitempty"`
	StreamId int64 `protobuf:"varint,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	RangeId  int64 `protobuf:"varint,3,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
}

func (x *RangeId) Reset() {
	*x = RangeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeId) ProtoMessage() {}

func (x *RangeId) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeId.ProtoReflect.Descriptor instead.
func (*RangeId) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{0}
}

func (x *RangeId) GetScId() int64 {
	if x != nil {
		return x.ScId
	}
	return 0
}

func (x *RangeId) GetStreamId() int64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *RangeId) GetRangeId() int64 {
	if x != nil {
		return x.RangeId
	}
	return 0
}

type KeyRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartHashKey int64 `protobuf:"varint,1,opt,name=start_hash_key,json=startHashKey,proto3" json:"start_hash_key,omitempty"`
	EndHashKey   int64 `protobuf:"varint,2,opt,name=end_hash_key,json=endHashKey,proto3" json:"end_hash_key,omitempty"`
}

func (x *KeyRange) Reset() {
	*x = KeyRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRange) ProtoMessage() {}

func (x *KeyRange) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyRange.ProtoReflect.Descriptor instead.
func (*KeyRange) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{1}
}

func (x *KeyRange) GetStartHashKey() int64 {
	if x != nil {
		return x.StartHashKey
	}
	return 0
}

func (x *KeyRange) GetEndHashKey() int64 {
	if x != nil {
		return x.EndHashKey
	}
	return 0
}

type RangeProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartHashKey       int64 `protobuf:"varint,1,opt,name=start_hash_key,json=startHashKey,proto3" json:"start_hash_key,omitempty"`
	EndHashKey         int64 `protobuf:"varint,2,opt,name=end_hash_key,json=endHashKey,proto3" json:"end_hash_key,omitempty"`
	RangeId            int64 `protobuf:"varint,3,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	StorageContainerId int64 `protobuf:"varint,4,opt,name=storage_container_id,json=storageContainerId,proto3" json:"storage_container_id,omitempty"`
}

func (x *RangeProperties) Reset() {
	*x = RangeProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeProperties) ProtoMessage() {}

func (x *RangeProperties) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeProperties.ProtoReflect.Descriptor instead.
func (*RangeProperties) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{2}
}

func (x *RangeProperties) GetStartHashKey() int64 {
	if x != nil {
		return x.StartHashKey
	}
	return 0
}

func (x *RangeProperties) GetEndHashKey() int64 {
	if x != nil {
		return x.EndHashKey
	}
	return 0
}

func (x *RangeProperties) GetRangeId() int64 {
	if x != nil {
		return x.RangeId
	}
	return 0
}

func (x *RangeProperties) GetStorageContainerId() int64 {
	if x != nil {
		return x.StorageContainerId
	}
	return 0
}

type RangeMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Props    *RangeProperties `protobuf:"bytes,1,opt,name=props,proto3" json:"props,omitempty"`
	Revision int64            `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	State    RangeState       `protobuf:"varint,3,opt,name=state,proto3,enum=bookkeeper.proto.stream.RangeState" json:"state,omitempty"`
	// time
	CreateTime int64 `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	FenceTime  int64 `protobuf:"varint,11,opt,name=fence_time,json=fenceTime,proto3" json:"fence_time,omitempty"`
	// children and parents
	Children []int64 `protobuf:"varint,20,rep,packed,name=children,proto3" json:"children,omitempty"`
	Parents  []int64 `protobuf:"varint,21,rep,packed,name=parents,proto3" json:"parents,omitempty"`
}

func (x *RangeMetadata) Reset() {
	*x = RangeMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeMetadata) ProtoMessage() {}

func (x *RangeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeMetadata.ProtoReflect.Descriptor instead.
func (*RangeMetadata) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{3}
}

func (x *RangeMetadata) GetProps() *RangeProperties {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *RangeMetadata) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *RangeMetadata) GetState() RangeState {
	if x != nil {
		return x.State
	}
	return RangeState_RANGE_ACTIVE
}

func (x *RangeMetadata) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *RangeMetadata) GetFenceTime() int64 {
	if x != nil {
		return x.FenceTime
	}
	return 0
}

func (x *RangeMetadata) GetChildren() []int64 {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *RangeMetadata) GetParents() []int64 {
	if x != nil {
		return x.Parents
	}
	return nil
}

type ParentRanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeId        int64   `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	ParentRangeIds []int64 `protobuf:"varint,2,rep,packed,name=parent_range_ids,json=parentRangeIds,proto3" json:"parent_range_ids,omitempty"`
}

func (x *ParentRanges) Reset() {
	*x = ParentRanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentRanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentRanges) ProtoMessage() {}

func (x *ParentRanges) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentRanges.ProtoReflect.Descriptor instead.
func (*ParentRanges) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{4}
}

func (x *ParentRanges) GetRangeId() int64 {
	if x != nil {
		return x.RangeId
	}
	return 0
}

func (x *ParentRanges) GetParentRangeIds() []int64 {
	if x != nil {
		return x.ParentRangeIds
	}
	return nil
}

type ParentRangesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChildRanges []*ParentRanges `protobuf:"bytes,1,rep,name=child_ranges,json=childRanges,proto3" json:"child_ranges,omitempty"`
}

func (x *ParentRangesList) Reset() {
	*x = ParentRangesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentRangesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentRangesList) ProtoMessage() {}

func (x *ParentRangesList) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentRangesList.ProtoReflect.Descriptor instead.
func (*ParentRangesList) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{5}
}

func (x *ParentRangesList) GetChildRanges() []*ParentRanges {
	if x != nil {
		return x.ChildRanges
	}
	return nil
}

type FixedRangeSplitPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRanges int32 `protobuf:"varint,1,opt,name=num_ranges,json=numRanges,proto3" json:"num_ranges,omitempty"`
}

func (x *FixedRangeSplitPolicy) Reset() {
	*x = FixedRangeSplitPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixedRangeSplitPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedRangeSplitPolicy) ProtoMessage() {}

func (x *FixedRangeSplitPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedRangeSplitPolicy.ProtoReflect.Descriptor instead.
func (*FixedRangeSplitPolicy) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{6}
}

func (x *FixedRangeSplitPolicy) GetNumRanges() int32 {
	if x != nil {
		return x.NumRanges
	}
	return 0
}

type BandwidthBasedSplitPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxRateInBytes   int32 `protobuf:"varint,1,opt,name=max_rate_in_bytes,json=maxRateInBytes,proto3" json:"max_rate_in_bytes,omitempty"`
	MinRateInBytes   int32 `protobuf:"varint,2,opt,name=min_rate_in_bytes,json=minRateInBytes,proto3" json:"min_rate_in_bytes,omitempty"`
	MaxRateInRecords int32 `protobuf:"varint,3,opt,name=max_rate_in_records,json=maxRateInRecords,proto3" json:"max_rate_in_records,omitempty"`
	MinRateInRecords int32 `protobuf:"varint,4,opt,name=min_rate_in_records,json=minRateInRecords,proto3" json:"min_rate_in_records,omitempty"`
	MaxSplitFactor   int32 `protobuf:"varint,5,opt,name=max_split_factor,json=maxSplitFactor,proto3" json:"max_split_factor,omitempty"`
}

func (x *BandwidthBasedSplitPolicy) Reset() {
	*x = BandwidthBasedSplitPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BandwidthBasedSplitPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BandwidthBasedSplitPolicy) ProtoMessage() {}

func (x *BandwidthBasedSplitPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BandwidthBasedSplitPolicy.ProtoReflect.Descriptor instead.
func (*BandwidthBasedSplitPolicy) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{7}
}

func (x *BandwidthBasedSplitPolicy) GetMaxRateInBytes() int32 {
	if x != nil {
		return x.MaxRateInBytes
	}
	return 0
}

func (x *BandwidthBasedSplitPolicy) GetMinRateInBytes() int32 {
	if x != nil {
		return x.MinRateInBytes
	}
	return 0
}

func (x *BandwidthBasedSplitPolicy) GetMaxRateInRecords() int32 {
	if x != nil {
		return x.MaxRateInRecords
	}
	return 0
}

func (x *BandwidthBasedSplitPolicy) GetMinRateInRecords() int32 {
	if x != nil {
		return x.MinRateInRecords
	}
	return 0
}

func (x *BandwidthBasedSplitPolicy) GetMaxSplitFactor() int32 {
	if x != nil {
		return x.MaxSplitFactor
	}
	return 0
}

type SplitPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type SplitPolicyType `protobuf:"varint,1,opt,name=type,proto3,enum=bookkeeper.proto.stream.SplitPolicyType" json:"type,omitempty"`
	// Types that are assignable to Policy:
	//
	//	*SplitPolicy_FixedRangePolicy
	//	*SplitPolicy_BandwidthPolicy
	Policy isSplitPolicy_Policy `protobuf_oneof:"policy"`
}

func (x *SplitPolicy) Reset() {
	*x = SplitPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitPolicy) ProtoMessage() {}

func (x *SplitPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitPolicy.ProtoReflect.Descriptor instead.
func (*SplitPolicy) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{8}
}

func (x *SplitPolicy) GetType() SplitPolicyType {
	if x != nil {
		return x.Type
	}
	return SplitPolicyType_FIXED
}

func (m *SplitPolicy) GetPolicy() isSplitPolicy_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (x *SplitPolicy) GetFixedRangePolicy() *FixedRangeSplitPolicy {
	if x, ok := x.GetPolicy().(*SplitPolicy_FixedRangePolicy); ok {
		return x.FixedRangePolicy
	}
	return nil
}

func (x *SplitPolicy) GetBandwidthPolicy() *BandwidthBasedSplitPolicy {
	if x, ok := x.GetPolicy().(*SplitPolicy_BandwidthPolicy); ok {
		return x.BandwidthPolicy
	}
	return nil
}

type isSplitPolicy_Policy interface {
	isSplitPolicy_Policy()
}

type SplitPolicy_FixedRangePolicy struct {
	FixedRangePolicy *FixedRangeSplitPolicy `protobuf:"bytes,2,opt,name=fixed_range_policy,json=fixedRangePolicy,proto3,oneof"`
}

type SplitPolicy_BandwidthPolicy struct {
	BandwidthPolicy *BandwidthBasedSplitPolicy `protobuf:"bytes,3,opt,name=bandwidth_policy,json=bandwidthPolicy,proto3,oneof"`
}

func (*SplitPolicy_FixedRangePolicy) isSplitPolicy_Policy() {}

func (*SplitPolicy_BandwidthPolicy) isSplitPolicy_Policy() {}

type SizeBasedSegmentRollingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSegmentSize int64 `protobuf:"varint,1,opt,name=max_segment_size,json=maxSegmentSize,proto3" json:"max_segment_size,omitempty"`
}

func (x *SizeBasedSegmentRollingPolicy) Reset() {
	*x = SizeBasedSegmentRollingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SizeBasedSegmentRollingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SizeBasedSegmentRollingPolicy) ProtoMessage() {}

func (x *SizeBasedSegmentRollingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SizeBasedSegmentRollingPolicy.ProtoReflect.Descriptor instead.
func (*SizeBasedSegmentRollingPolicy) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{9}
}

func (x *SizeBasedSegmentRollingPolicy) GetMaxSegmentSize() int64 {
	if x != nil {
		return x.MaxSegmentSize
	}
	return 0
}

type TimeBasedSegmentRollingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntervalSeconds int64 `protobuf:"varint,1,opt,name=interval_seconds,json=intervalSeconds,proto3" json:"interval_seconds,omitempty"`
}

func (x *TimeBasedSegmentRollingPolicy) Reset() {
	*x = TimeBasedSegmentRollingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeBasedSegmentRollingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeBasedSegmentRollingPolicy) ProtoMessage() {}

func (x *TimeBasedSegmentRollingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeBasedSegmentRollingPolicy.ProtoReflect.Descriptor instead.
func (*TimeBasedSegmentRollingPolicy) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{10}
}

func (x *TimeBasedSegmentRollingPolicy) GetIntervalSeconds() int64 {
	if x != nil {
		return x.IntervalSeconds
	}
	return 0
}

type SegmentRollingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizePolicy *SizeBasedSegmentRollingPolicy `protobuf:"bytes,1,opt,name=size_policy,json=sizePolicy,proto3" json:"size_policy,omitempty"`
	TimePolicy *TimeBasedSegmentRollingPolicy `protobuf:"bytes,2,opt,name=time_policy,json=timePolicy,proto3" json:"time_policy,omitempty"`
}

func (x *SegmentRollingPolicy) Reset() {
	*x = SegmentRollingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentRollingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentRollingPolicy) ProtoMessage() {}

func (x *SegmentRollingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentRollingPolicy.ProtoReflect.Descriptor instead.
func (*SegmentRollingPolicy) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{11}
}

func (x *SegmentRollingPolicy) GetSizePolicy() *SizeBasedSegmentRollingPolicy {
	if x != nil {
		return x.SizePolicy
	}
	return nil
}

func (x *SegmentRollingPolicy) GetTimePolicy() *TimeBasedSegmentRollingPolicy {
	if x != nil {
		return x.TimePolicy
	}
	return nil
}

type TimeBasedRetentionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetentionMinutes int64 `protobuf:"varint,1,opt,name=retention_minutes,json=retentionMinutes,proto3" json:"retention_minutes,omitempty"`
}

func (x *TimeBasedRetentionPolicy) Reset() {
	*x = TimeBasedRetentionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeBasedRetentionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeBasedRetentionPolicy) ProtoMessage() {}

func (x *TimeBasedRetentionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeBasedRetentionPolicy.ProtoReflect.Descriptor instead.
func (*TimeBasedRetentionPolicy) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{12}
}

func (x *TimeBasedRetentionPolicy) GetRetentionMinutes() int64 {
	if x != nil {
		return x.RetentionMinutes
	}
	return 0
}

type RetentionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimePolicy *TimeBasedRetentionPolicy `protobuf:"bytes,1,opt,name=time_policy,json=timePolicy,proto3" json:"time_policy,omitempty"`
}

func (x *RetentionPolicy) Reset() {
	*x = RetentionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetentionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetentionPolicy) ProtoMessage() {}

func (x *RetentionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetentionPolicy.ProtoReflect.Descriptor instead.
func (*RetentionPolicy) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{13}
}

func (x *RetentionPolicy) GetTimePolicy() *TimeBasedRetentionPolicy {
	if x != nil {
		return x.TimePolicy
	}
	return nil
}

type StreamConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyType          RangeKeyType          `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=bookkeeper.proto.stream.RangeKeyType" json:"key_type,omitempty"`
	MinNumRanges     int32                 `protobuf:"varint,2,opt,name=min_num_ranges,json=minNumRanges,proto3" json:"min_num_ranges,omitempty"`
	InitialNumRanges int32                 `protobuf:"varint,3,opt,name=initial_num_ranges,json=initialNumRanges,proto3" json:"initial_num_ranges,omitempty"`
	SplitPolicy      *SplitPolicy          `protobuf:"bytes,4,opt,name=split_policy,json=splitPolicy,proto3" json:"split_policy,omitempty"`
	RollingPolicy    *SegmentRollingPolicy `protobuf:"bytes,5,opt,name=rolling_policy,json=rollingPolicy,proto3" json:"rolling_policy,omitempty"`
	RetentionPolicy  *RetentionPolicy      `protobuf:"bytes,6,opt,name=retention_policy,json=retentionPolicy,proto3" json:"retention_policy,omitempty"`
	StorageType      StorageType           `protobuf:"varint,7,opt,name=storage_type,json=storageType,proto3,enum=bookkeeper.proto.stream.StorageType" json:"storage_type,omitempty"`
	TtlSeconds       int32                 `protobuf:"varint,8,opt,name=ttl_seconds,json=ttlSeconds,proto3" json:"ttl_seconds,omitempty"`
}

func (x *StreamConfiguration) Reset() {
	*x = StreamConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamConfiguration) ProtoMessage() {}

func (x *StreamConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamConfiguration.ProtoReflect.Descriptor instead.
func (*StreamConfiguration) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{14}
}

func (x *StreamConfiguration) GetKeyType() RangeKeyType {
	if x != nil {
		return x.KeyType
	}
	return RangeKeyType_NULL
}

func (x *StreamConfiguration) GetMinNumRanges() int32 {
	if x != nil {
		return x.MinNumRanges
	}
	return 0
}

func (x *StreamConfiguration) GetInitialNumRanges() int32 {
	if x != nil {
		return x.InitialNumRanges
	}
	return 0
}

func (x *StreamConfiguration) GetSplitPolicy() *SplitPolicy {
	if x != nil {
		return x.SplitPolicy
	}
	return nil
}

func (x *StreamConfiguration) GetRollingPolicy() *SegmentRollingPolicy {
	if x != nil {
		return x.RollingPolicy
	}
	return nil
}

func (x *StreamConfiguration) GetRetentionPolicy() *RetentionPolicy {
	if x != nil {
		return x.RetentionPolicy
	}
	return nil
}

func (x *StreamConfiguration) GetStorageType() StorageType {
	if x != nil {
		return x.StorageType
	}
	return StorageType_STREAM
}

func (x *StreamConfiguration) GetTtlSeconds() int32 {
	if x != nil {
		return x.TtlSeconds
	}
	return 0
}

type StreamProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId           int64                `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	StorageContainerId int64                `protobuf:"varint,2,opt,name=storage_container_id,json=storageContainerId,proto3" json:"storage_container_id,omitempty"`
	StreamName         string               `protobuf:"bytes,3,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	StreamConf         *StreamConfiguration `protobuf:"bytes,4,opt,name=stream_conf,json=streamConf,proto3" json:"stream_conf,omitempty"`
}

func (x *StreamProperties) Reset() {
	*x = StreamProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamProperties) ProtoMessage() {}

func (x *StreamProperties) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamProperties.ProtoReflect.Descriptor instead.
func (*StreamProperties) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{15}
}

func (x *StreamProperties) GetStreamId() int64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *StreamProperties) GetStorageContainerId() int64 {
	if x != nil {
		return x.StorageContainerId
	}
	return 0
}

func (x *StreamProperties) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *StreamProperties) GetStreamConf() *StreamConfiguration {
	if x != nil {
		return x.StreamConf
	}
	return nil
}

type StreamName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceName string `protobuf:"bytes,1,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	StreamName    string `protobuf:"bytes,2,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
}

func (x *StreamName) Reset() {
	*x = StreamName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamName) ProtoMessage() {}

func (x *StreamName) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamName.ProtoReflect.Descriptor instead.
func (*StreamName) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{16}
}

func (x *StreamName) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *StreamName) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

type StreamMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// stream properties
	Props *StreamProperties `protobuf:"bytes,1,opt,name=props,proto3" json:"props,omitempty"`
	// stream lifecycle state
	LifecycleState StreamMetadata_LifecycleState `protobuf:"varint,2,opt,name=lifecycle_state,json=lifecycleState,proto3,enum=bookkeeper.proto.stream.StreamMetadata_LifecycleState" json:"lifecycle_state,omitempty"`
	// stream serving state
	ServingState StreamMetadata_ServingState `protobuf:"varint,3,opt,name=serving_state,json=servingState,proto3,enum=bookkeeper.proto.stream.StreamMetadata_ServingState" json:"serving_state,omitempty"`
	// time
	CTime uint64 `protobuf:"varint,4,opt,name=c_time,json=cTime,proto3" json:"c_time,omitempty"`
	MTime uint64 `protobuf:"varint,5,opt,name=m_time,json=mTime,proto3" json:"m_time,omitempty"`
	// ranges
	NextRangeId uint64 `protobuf:"varint,100,opt,name=next_range_id,json=nextRangeId,proto3" json:"next_range_id,omitempty"`
	// current active ranges
	CurrentRanges []uint64 `protobuf:"varint,101,rep,packed,name=current_ranges,json=currentRanges,proto3" json:"current_ranges,omitempty"`
}

func (x *StreamMetadata) Reset() {
	*x = StreamMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMetadata) ProtoMessage() {}

func (x *StreamMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMetadata.ProtoReflect.Descriptor instead.
func (*StreamMetadata) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{17}
}

func (x *StreamMetadata) GetProps() *StreamProperties {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *StreamMetadata) GetLifecycleState() StreamMetadata_LifecycleState {
	if x != nil {
		return x.LifecycleState
	}
	return StreamMetadata_UNINIT
}

func (x *StreamMetadata) GetServingState() StreamMetadata_ServingState {
	if x != nil {
		return x.ServingState
	}
	return StreamMetadata_WRITABLE
}

func (x *StreamMetadata) GetCTime() uint64 {
	if x != nil {
		return x.CTime
	}
	return 0
}

func (x *StreamMetadata) GetMTime() uint64 {
	if x != nil {
		return x.MTime
	}
	return 0
}

func (x *StreamMetadata) GetNextRangeId() uint64 {
	if x != nil {
		return x.NextRangeId
	}
	return 0
}

func (x *StreamMetadata) GetCurrentRanges() []uint64 {
	if x != nil {
		return x.CurrentRanges
	}
	return nil
}

// user requested
type NamespaceConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultStreamConf *StreamConfiguration `protobuf:"bytes,1,opt,name=default_stream_conf,json=defaultStreamConf,proto3" json:"default_stream_conf,omitempty"`
}

func (x *NamespaceConfiguration) Reset() {
	*x = NamespaceConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceConfiguration) ProtoMessage() {}

func (x *NamespaceConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceConfiguration.ProtoReflect.Descriptor instead.
func (*NamespaceConfiguration) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{18}
}

func (x *NamespaceConfiguration) GetDefaultStreamConf() *StreamConfiguration {
	if x != nil {
		return x.DefaultStreamConf
	}
	return nil
}

// public metadata for a namespace
type NamespaceProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceId       int64                `protobuf:"varint,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	NamespaceName     string               `protobuf:"bytes,2,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	DefaultStreamConf *StreamConfiguration `protobuf:"bytes,3,opt,name=default_stream_conf,json=defaultStreamConf,proto3" json:"default_stream_conf,omitempty"`
}

func (x *NamespaceProperties) Reset() {
	*x = NamespaceProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceProperties) ProtoMessage() {}

func (x *NamespaceProperties) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceProperties.ProtoReflect.Descriptor instead.
func (*NamespaceProperties) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{19}
}

func (x *NamespaceProperties) GetNamespaceId() int64 {
	if x != nil {
		return x.NamespaceId
	}
	return 0
}

func (x *NamespaceProperties) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *NamespaceProperties) GetDefaultStreamConf() *StreamConfiguration {
	if x != nil {
		return x.DefaultStreamConf
	}
	return nil
}

// the whole metadata for a namespace (including both public and private)
type NamespaceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Props *NamespaceProperties `protobuf:"bytes,1,opt,name=props,proto3" json:"props,omitempty"`
}

func (x *NamespaceMetadata) Reset() {
	*x = NamespaceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceMetadata) ProtoMessage() {}

func (x *NamespaceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceMetadata.ProtoReflect.Descriptor instead.
func (*NamespaceMetadata) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{20}
}

func (x *NamespaceMetadata) GetProps() *NamespaceProperties {
	if x != nil {
		return x.Props
	}
	return nil
}

var File_stream_proto protoreflect.FileDescriptor

var file_stream_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17,
	0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x56, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22,
	0x52, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4b, 0x65,
	0x79, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x48, 0x61, 0x73, 0x68,
	0x4b, 0x65, 0x79, 0x22, 0xa6, 0x01, 0x0a, 0x0f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a,
	0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9c, 0x02, 0x0a,
	0x0d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x0c, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x73,
	0x22, 0x5c, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x36,
	0x0a, 0x15, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x19, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x69, 0x6e,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0x96, 0x02, 0x0a, 0x0b, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x5e, 0x0a, 0x12, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x10,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x5f, 0x0a, 0x10, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x61,
	0x73, 0x65, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00,
	0x52, 0x0f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x49, 0x0a, 0x1d, 0x53,
	0x69, 0x7a, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x10,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4a, 0x0a, 0x1d, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x57, 0x0a, 0x0b, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x57, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x47, 0x0a,
	0x18, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x52, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x89, 0x04,
	0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65,
	0x65, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x54, 0x0a, 0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x72, 0x6f, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x53, 0x0a, 0x10, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x52,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x47, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x74, 0x6c, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x10, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d,
	0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0x54, 0x0a,
	0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x84, 0x04, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x5f, 0x0a, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x0e,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x45, 0x4e, 0x43, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x04, 0x22, 0x2a,
	0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x57, 0x52, 0x49, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x41, 0x44, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x22, 0x76, 0x0a, 0x16, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x22, 0xbd, 0x01, 0x0a, 0x13, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x22, 0x57, 0x0a, 0x11, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x2a, 0x43, 0x0a, 0x0a, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x45, 0x4e, 0x43, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x02,
	0x2a, 0x2b, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41,
	0x53, 0x48, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x41, 0x57, 0x10, 0x02, 0x2a, 0x24, 0x0a,
	0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x2a, 0x2b, 0x0a, 0x0f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0x01,
	0x42, 0x15, 0x50, 0x01, 0x5a, 0x11, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stream_proto_rawDescOnce sync.Once
	file_stream_proto_rawDescData = file_stream_proto_rawDesc
)

func file_stream_proto_rawDescGZIP() []byte {
	file_stream_proto_rawDescOnce.Do(func() {
		file_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_stream_proto_rawDescData)
	})
	return file_stream_proto_rawDescData
}

var file_stream_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_stream_proto_goTypes = []interface{}{
	(RangeState)(0),                       // 0: bookkeeper.proto.stream.RangeState
	(RangeKeyType)(0),                     // 1: bookkeeper.proto.stream.RangeKeyType
	(StorageType)(0),                      // 2: bookkeeper.proto.stream.StorageType
	(SplitPolicyType)(0),                  // 3: bookkeeper.proto.stream.SplitPolicyType
	(StreamMetadata_LifecycleState)(0),    // 4: bookkeeper.proto.stream.StreamMetadata.LifecycleState
	(StreamMetadata_ServingState)(0),      // 5: bookkeeper.proto.stream.StreamMetadata.ServingState
	(*RangeId)(nil),                       // 6: bookkeeper.proto.stream.RangeId
	(*KeyRange)(nil),                      // 7: bookkeeper.proto.stream.KeyRange
	(*RangeProperties)(nil),               // 8: bookkeeper.proto.stream.RangeProperties
	(*RangeMetadata)(nil),                 // 9: bookkeeper.proto.stream.RangeMetadata
	(*ParentRanges)(nil),                  // 10: bookkeeper.proto.stream.ParentRanges
	(*ParentRangesList)(nil),              // 11: bookkeeper.proto.stream.ParentRangesList
	(*FixedRangeSplitPolicy)(nil),         // 12: bookkeeper.proto.stream.FixedRangeSplitPolicy
	(*BandwidthBasedSplitPolicy)(nil),     // 13: bookkeeper.proto.stream.BandwidthBasedSplitPolicy
	(*SplitPolicy)(nil),                   // 14: bookkeeper.proto.stream.SplitPolicy
	(*SizeBasedSegmentRollingPolicy)(nil), // 15: bookkeeper.proto.stream.SizeBasedSegmentRollingPolicy
	(*TimeBasedSegmentRollingPolicy)(nil), // 16: bookkeeper.proto.stream.TimeBasedSegmentRollingPolicy
	(*SegmentRollingPolicy)(nil),          // 17: bookkeeper.proto.stream.SegmentRollingPolicy
	(*TimeBasedRetentionPolicy)(nil),      // 18: bookkeeper.proto.stream.TimeBasedRetentionPolicy
	(*RetentionPolicy)(nil),               // 19: bookkeeper.proto.stream.RetentionPolicy
	(*StreamConfiguration)(nil),           // 20: bookkeeper.proto.stream.StreamConfiguration
	(*StreamProperties)(nil),              // 21: bookkeeper.proto.stream.StreamProperties
	(*StreamName)(nil),                    // 22: bookkeeper.proto.stream.StreamName
	(*StreamMetadata)(nil),                // 23: bookkeeper.proto.stream.StreamMetadata
	(*NamespaceConfiguration)(nil),        // 24: bookkeeper.proto.stream.NamespaceConfiguration
	(*NamespaceProperties)(nil),           // 25: bookkeeper.proto.stream.NamespaceProperties
	(*NamespaceMetadata)(nil),             // 26: bookkeeper.proto.stream.NamespaceMetadata
}
var file_stream_proto_depIdxs = []int32{
	8,  // 0: bookkeeper.proto.stream.RangeMetadata.props:type_name -> bookkeeper.proto.stream.RangeProperties
	0,  // 1: bookkeeper.proto.stream.RangeMetadata.state:type_name -> bookkeeper.proto.stream.RangeState
	10, // 2: bookkeeper.proto.stream.ParentRangesList.child_ranges:type_name -> bookkeeper.proto.stream.ParentRanges
	3,  // 3: bookkeeper.proto.stream.SplitPolicy.type:type_name -> bookkeeper.proto.stream.SplitPolicyType
	12, // 4: bookkeeper.proto.stream.SplitPolicy.fixed_range_policy:type_name -> bookkeeper.proto.stream.FixedRangeSplitPolicy
	13, // 5: bookkeeper.proto.stream.SplitPolicy.bandwidth_policy:type_name -> bookkeeper.proto.stream.BandwidthBasedSplitPolicy
	15, // 6: bookkeeper.proto.stream.SegmentRollingPolicy.size_policy:type_name -> bookkeeper.proto.stream.SizeBasedSegmentRollingPolicy
	16, // 7: bookkeeper.proto.stream.SegmentRollingPolicy.time_policy:type_name -> bookkeeper.proto.stream.TimeBasedSegmentRollingPolicy
	18, // 8: bookkeeper.proto.stream.RetentionPolicy.time_policy:type_name -> bookkeeper.proto.stream.TimeBasedRetentionPolicy
	1,  // 9: bookkeeper.proto.stream.StreamConfiguration.key_type:type_name -> bookkeeper.proto.stream.RangeKeyType
	14, // 10: bookkeeper.proto.stream.StreamConfiguration.split_policy:type_name -> bookkeeper.proto.stream.SplitPolicy
	17, // 11: bookkeeper.proto.stream.StreamConfiguration.rolling_policy:type_name -> bookkeeper.proto.stream.SegmentRollingPolicy
	19, // 12: bookkeeper.proto.stream.StreamConfiguration.retention_policy:type_name -> bookkeeper.proto.stream.RetentionPolicy
	2,  // 13: bookkeeper.proto.stream.StreamConfiguration.storage_type:type_name -> bookkeeper.proto.stream.StorageType
	20, // 14: bookkeeper.proto.stream.StreamProperties.stream_conf:type_name -> bookkeeper.proto.stream.StreamConfiguration
	21, // 15: bookkeeper.proto.stream.StreamMetadata.props:type_name -> bookkeeper.proto.stream.StreamProperties
	4,  // 16: bookkeeper.proto.stream.StreamMetadata.lifecycle_state:type_name -> bookkeeper.proto.stream.StreamMetadata.LifecycleState
	5,  // 17: bookkeeper.proto.stream.StreamMetadata.serving_state:type_name -> bookkeeper.proto.stream.StreamMetadata.ServingState
	20, // 18: bookkeeper.proto.stream.NamespaceConfiguration.default_stream_conf:type_name -> bookkeeper.proto.stream.StreamConfiguration
	20, // 19: bookkeeper.proto.stream.NamespaceProperties.default_stream_conf:type_name -> bookkeeper.proto.stream.StreamConfiguration
	25, // 20: bookkeeper.proto.stream.NamespaceMetadata.props:type_name -> bookkeeper.proto.stream.NamespaceProperties
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_stream_proto_init() }
func file_stream_proto_init() {
	if File_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentRanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentRangesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixedRangeSplitPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BandwidthBasedSplitPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SizeBasedSegmentRollingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeBasedSegmentRollingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentRollingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeBasedRetentionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetentionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_stream_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*SplitPolicy_FixedRangePolicy)(nil),
		(*SplitPolicy_BandwidthPolicy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stream_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stream_proto_goTypes,
		DependencyIndexes: file_stream_proto_depIdxs,
		EnumInfos:         file_stream_proto_enumTypes,
		MessageInfos:      file_stream_proto_msgTypes,
	}.Build()
	File_stream_proto = out.File
	file_stream_proto_rawDesc = nil
	file_stream_proto_goTypes = nil
	file_stream_proto_depIdxs = nil
}

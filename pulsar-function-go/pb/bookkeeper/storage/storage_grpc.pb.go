//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: storage.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetaRangeService_GetActiveRanges_FullMethodName = "/bookkeeper.proto.storage.MetaRangeService/GetActiveRanges"
)

// MetaRangeServiceClient is the client API for MetaRangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaRangeServiceClient interface {
	GetActiveRanges(ctx context.Context, in *GetActiveRangesRequest, opts ...grpc.CallOption) (*GetActiveRangesResponse, error)
}

type metaRangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaRangeServiceClient(cc grpc.ClientConnInterface) MetaRangeServiceClient {
	return &metaRangeServiceClient{cc}
}

func (c *metaRangeServiceClient) GetActiveRanges(ctx context.Context, in *GetActiveRangesRequest, opts ...grpc.CallOption) (*GetActiveRangesResponse, error) {
	out := new(GetActiveRangesResponse)
	err := c.cc.Invoke(ctx, MetaRangeService_GetActiveRanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaRangeServiceServer is the server API for MetaRangeService service.
// All implementations must embed UnimplementedMetaRangeServiceServer
// for forward compatibility
type MetaRangeServiceServer interface {
	GetActiveRanges(context.Context, *GetActiveRangesRequest) (*GetActiveRangesResponse, error)
	mustEmbedUnimplementedMetaRangeServiceServer()
}

// UnimplementedMetaRangeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetaRangeServiceServer struct {
}

func (UnimplementedMetaRangeServiceServer) GetActiveRanges(context.Context, *GetActiveRangesRequest) (*GetActiveRangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveRanges not implemented")
}
func (UnimplementedMetaRangeServiceServer) mustEmbedUnimplementedMetaRangeServiceServer() {}

// UnsafeMetaRangeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaRangeServiceServer will
// result in compilation errors.
type UnsafeMetaRangeServiceServer interface {
	mustEmbedUnimplementedMetaRangeServiceServer()
}

func RegisterMetaRangeServiceServer(s grpc.ServiceRegistrar, srv MetaRangeServiceServer) {
	s.RegisterService(&MetaRangeService_ServiceDesc, srv)
}

func _MetaRangeService_GetActiveRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveRangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRangeServiceServer).GetActiveRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaRangeService_GetActiveRanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRangeServiceServer).GetActiveRanges(ctx, req.(*GetActiveRangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaRangeService_ServiceDesc is the grpc.ServiceDesc for MetaRangeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaRangeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookkeeper.proto.storage.MetaRangeService",
	HandlerType: (*MetaRangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActiveRanges",
			Handler:    _MetaRangeService_GetActiveRanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}

const (
	RootRangeService_CreateNamespace_FullMethodName = "/bookkeeper.proto.storage.RootRangeService/CreateNamespace"
	RootRangeService_DeleteNamespace_FullMethodName = "/bookkeeper.proto.storage.RootRangeService/DeleteNamespace"
	RootRangeService_GetNamespace_FullMethodName    = "/bookkeeper.proto.storage.RootRangeService/GetNamespace"
	RootRangeService_CreateStream_FullMethodName    = "/bookkeeper.proto.storage.RootRangeService/CreateStream"
	RootRangeService_DeleteStream_FullMethodName    = "/bookkeeper.proto.storage.RootRangeService/DeleteStream"
	RootRangeService_GetStream_FullMethodName       = "/bookkeeper.proto.storage.RootRangeService/GetStream"
)

// RootRangeServiceClient is the client API for RootRangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RootRangeServiceClient interface {
	// Namespace Methods
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error)
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error)
	// Stream Methods
	CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error)
	DeleteStream(ctx context.Context, in *DeleteStreamRequest, opts ...grpc.CallOption) (*DeleteStreamResponse, error)
	GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*GetStreamResponse, error)
}

type rootRangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRootRangeServiceClient(cc grpc.ClientConnInterface) RootRangeServiceClient {
	return &rootRangeServiceClient{cc}
}

func (c *rootRangeServiceClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, RootRangeService_CreateNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootRangeServiceClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error) {
	out := new(DeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, RootRangeService_DeleteNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootRangeServiceClient) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error) {
	out := new(GetNamespaceResponse)
	err := c.cc.Invoke(ctx, RootRangeService_GetNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootRangeServiceClient) CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error) {
	out := new(CreateStreamResponse)
	err := c.cc.Invoke(ctx, RootRangeService_CreateStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootRangeServiceClient) DeleteStream(ctx context.Context, in *DeleteStreamRequest, opts ...grpc.CallOption) (*DeleteStreamResponse, error) {
	out := new(DeleteStreamResponse)
	err := c.cc.Invoke(ctx, RootRangeService_DeleteStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootRangeServiceClient) GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*GetStreamResponse, error) {
	out := new(GetStreamResponse)
	err := c.cc.Invoke(ctx, RootRangeService_GetStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RootRangeServiceServer is the server API for RootRangeService service.
// All implementations must embed UnimplementedRootRangeServiceServer
// for forward compatibility
type RootRangeServiceServer interface {
	// Namespace Methods
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error)
	// Stream Methods
	CreateStream(context.Context, *CreateStreamRequest) (*CreateStreamResponse, error)
	DeleteStream(context.Context, *DeleteStreamRequest) (*DeleteStreamResponse, error)
	GetStream(context.Context, *GetStreamRequest) (*GetStreamResponse, error)
	mustEmbedUnimplementedRootRangeServiceServer()
}

// UnimplementedRootRangeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRootRangeServiceServer struct {
}

func (UnimplementedRootRangeServiceServer) CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedRootRangeServiceServer) DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedRootRangeServiceServer) GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedRootRangeServiceServer) CreateStream(context.Context, *CreateStreamRequest) (*CreateStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedRootRangeServiceServer) DeleteStream(context.Context, *DeleteStreamRequest) (*DeleteStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStream not implemented")
}
func (UnimplementedRootRangeServiceServer) GetStream(context.Context, *GetStreamRequest) (*GetStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedRootRangeServiceServer) mustEmbedUnimplementedRootRangeServiceServer() {}

// UnsafeRootRangeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RootRangeServiceServer will
// result in compilation errors.
type UnsafeRootRangeServiceServer interface {
	mustEmbedUnimplementedRootRangeServiceServer()
}

func RegisterRootRangeServiceServer(s grpc.ServiceRegistrar, srv RootRangeServiceServer) {
	s.RegisterService(&RootRangeService_ServiceDesc, srv)
}

func _RootRangeService_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootRangeServiceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootRangeService_CreateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootRangeServiceServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootRangeService_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootRangeServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootRangeService_DeleteNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootRangeServiceServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootRangeService_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootRangeServiceServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootRangeService_GetNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootRangeServiceServer).GetNamespace(ctx, req.(*GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootRangeService_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootRangeServiceServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootRangeService_CreateStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootRangeServiceServer).CreateStream(ctx, req.(*CreateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootRangeService_DeleteStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootRangeServiceServer).DeleteStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootRangeService_DeleteStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootRangeServiceServer).DeleteStream(ctx, req.(*DeleteStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootRangeService_GetStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootRangeServiceServer).GetStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootRangeService_GetStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootRangeServiceServer).GetStream(ctx, req.(*GetStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RootRangeService_ServiceDesc is the grpc.ServiceDesc for RootRangeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RootRangeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookkeeper.proto.storage.RootRangeService",
	HandlerType: (*RootRangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNamespace",
			Handler:    _RootRangeService_CreateNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _RootRangeService_DeleteNamespace_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _RootRangeService_GetNamespace_Handler,
		},
		{
			MethodName: "CreateStream",
			Handler:    _RootRangeService_CreateStream_Handler,
		},
		{
			MethodName: "DeleteStream",
			Handler:    _RootRangeService_DeleteStream_Handler,
		},
		{
			MethodName: "GetStream",
			Handler:    _RootRangeService_GetStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}

const (
	StorageContainerService_GetStorageContainerEndpoint_FullMethodName = "/bookkeeper.proto.storage.StorageContainerService/GetStorageContainerEndpoint"
)

// StorageContainerServiceClient is the client API for StorageContainerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageContainerServiceClient interface {
	// Get the storage container endpoints
	GetStorageContainerEndpoint(ctx context.Context, in *GetStorageContainerEndpointRequest, opts ...grpc.CallOption) (*GetStorageContainerEndpointResponse, error)
}

type storageContainerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageContainerServiceClient(cc grpc.ClientConnInterface) StorageContainerServiceClient {
	return &storageContainerServiceClient{cc}
}

func (c *storageContainerServiceClient) GetStorageContainerEndpoint(ctx context.Context, in *GetStorageContainerEndpointRequest, opts ...grpc.CallOption) (*GetStorageContainerEndpointResponse, error) {
	out := new(GetStorageContainerEndpointResponse)
	err := c.cc.Invoke(ctx, StorageContainerService_GetStorageContainerEndpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageContainerServiceServer is the server API for StorageContainerService service.
// All implementations must embed UnimplementedStorageContainerServiceServer
// for forward compatibility
type StorageContainerServiceServer interface {
	// Get the storage container endpoints
	GetStorageContainerEndpoint(context.Context, *GetStorageContainerEndpointRequest) (*GetStorageContainerEndpointResponse, error)
	mustEmbedUnimplementedStorageContainerServiceServer()
}

// UnimplementedStorageContainerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorageContainerServiceServer struct {
}

func (UnimplementedStorageContainerServiceServer) GetStorageContainerEndpoint(context.Context, *GetStorageContainerEndpointRequest) (*GetStorageContainerEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageContainerEndpoint not implemented")
}
func (UnimplementedStorageContainerServiceServer) mustEmbedUnimplementedStorageContainerServiceServer() {
}

// UnsafeStorageContainerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageContainerServiceServer will
// result in compilation errors.
type UnsafeStorageContainerServiceServer interface {
	mustEmbedUnimplementedStorageContainerServiceServer()
}

func RegisterStorageContainerServiceServer(s grpc.ServiceRegistrar, srv StorageContainerServiceServer) {
	s.RegisterService(&StorageContainerService_ServiceDesc, srv)
}

func _StorageContainerService_GetStorageContainerEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorageContainerEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageContainerServiceServer).GetStorageContainerEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageContainerService_GetStorageContainerEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageContainerServiceServer).GetStorageContainerEndpoint(ctx, req.(*GetStorageContainerEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageContainerService_ServiceDesc is the grpc.ServiceDesc for StorageContainerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageContainerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookkeeper.proto.storage.StorageContainerService",
	HandlerType: (*StorageContainerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStorageContainerEndpoint",
			Handler:    _StorageContainerService_GetStorageContainerEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}

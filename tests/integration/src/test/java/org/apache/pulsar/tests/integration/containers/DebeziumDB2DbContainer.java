/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.pulsar.tests.integration.containers;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import lombok.extern.slf4j.Slf4j;
import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;

@Slf4j
public class DebeziumDB2DbContainer extends ChaosContainer<DebeziumDB2DbContainer> {

    public static final String NAME = "debezium-db2";
    static final Integer[] PORTS = { 50000 };

    //
    private static final String IMAGE_NAME = "apachepulsar/debezium-db2-test-image:latest";
    /*
    "If the Program is designated as "Non-Production", the Program can only be deployed as part
    of the Licensee's internal development and test environment for internal non-production activities,
    including but not limited to testing, performance tuning, fault diagnosis, internal benchmarking,
    staging, quality assurance activity and/or developing internally used additions or extensions to
    the Program using published application programming interfaces. Licensee is not authorized to use
    any part of the Program for any other purposes without acquiring the appropriate production
    entitlements."
    (https://www.ibm.com/support/customer/csol/terms/?id=L-GMET-8KJN5X&lc=en#detail-document)
     */
    private static final String DBNAME = "mydb2";
    private static final String USERNAME = "db2inst1";
    private static final String PASS = "admin";

    public DebeziumDB2DbContainer(String clusterName) {
        super(clusterName, IMAGE_NAME);
    }

    @Override
    public String getContainerName() {
        return clusterName;
    }

    @Override
    protected void configure() {
        super.configure();
        this.withNetworkAliases(NAME)
            .withExposedPorts(PORTS)
            .withEnv("LICENSE", "accept")
            .withEnv("DB2INSTANCE", USERNAME)
            .withEnv("DB2INST1_PASSWORD", PASS)
            .withEnv("DBNAME", DBNAME)
            .withEnv("BLU", "false")
            .withEnv("ENABLE_ORACLE_COMPATIBILITY", "false")
            .withEnv("UPDATEAVAIL", "NO")
            .withEnv("TO_CREATE_SAMPLEDB", "false")
            .withEnv("REPODB", "false")
            .withEnv("IS_OSXFS", "false")
            .withEnv("PERSISTENT_HOME", "true")
            .withEnv("HADR_ENABLED", "false")
            .withPrivilegedMode(true)
            .withStartupTimeout(Duration.of(900, ChronoUnit.SECONDS))
            .withCreateContainerCmdModifier(createContainerCmd -> {
                createContainerCmd.withHostName(NAME);
                createContainerCmd.withName(getContainerName());
            }).waitingFor((new LogMessageWaitStrategy()).withRegEx(".*Setup has completed\\..*")
                        .withStartupTimeout(Duration.of(10L, ChronoUnit.MINUTES));
    }
    public String getDriverClassName() {
        return "com.ibm.db2.jcc.DB2Driver";
    }
    public String getUsername(){
        return USERNAME;
    }
    public String getPassword(){
        return PASS;
    }

    public String getJdbcUrl() {
        return "jdbc:db2://" + this.getHost() + ":" + this.getMappedPort(50000) + "/" + DBNAME;
    }

    public String createTableStatement(){
        return String.format("CREATE TABLE %s.STORES(store_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,store_name VARCHAR(150) NOT NULL,state_id INT NOT NULL,zip_code VARCHAR(6),PRIMARY KEY (store_id))",
                getUsername().toUpperCase());
    }
    public String insertStatement(){
        return String.format("INSERT INTO %s.STORES(store_name, state_id, zip_code) VALUES ('mystore', 12, '11111')",
                getUsername().toUpperCase());
    }
    public String selectStatement(){
        return String.format("SELECT * FROM %s.STORES",
                getUsername().toUpperCase());
    }
    private Connection connection;
    public Connection getConnection() throws SQLException, ClassNotFoundException {
        log.info(String.format("JDBC Connection URL is: %s", this.getJdbcUrl()));
        if(connection == null){
            Class.forName("com.ibm.db2.jcc.DB2Driver");
            var conn = DriverManager.getConnection(this.getJdbcUrl(), getUsername(), getPassword());
            this.connection = conn;
        }
        return connection;
    }
    public String enableCdcStatement(){
        return "VALUES ASNCDC.ASNCDCSERVICES('start','asncdc')";
    }
    public String addCdcTableStatement(){
        return String.format("CALL ASNCDC.ADDTABLE('%s','STORES')", getUsername());
    }
    public PreparedStatement executePreparedStatement(String sqlQuery) throws SQLException, ClassNotFoundException {
        var myConnection = this.getConnection();
        return myConnection.prepareStatement(sqlQuery);
    }

    public String getStoreNameResult(PreparedStatement statement) throws SQLException {
        var result = statement.execute();
        if(result == true)
        {
            var resultSet = statement.getResultSet();
            while(resultSet.next())
            {
                var storeName = resultSet.getString("store_name");
                return storeName;
            }
        }
        return null;
    }
}
